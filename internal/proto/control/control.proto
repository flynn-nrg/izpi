syntax = "proto3";

option go_package = "github.com/flynn-nrg/izpi/internal/proto/control;control";

package control;

// Service for controlling render operations on worker nodes.
service RenderControlService {
  rpc RenderSetup (RenderSetupRequest) returns (stream RenderSetupResponse);
  rpc RenderTile (RenderTileRequest) returns (stream RenderTileResponse);
  rpc RenderEnd (RenderEndRequest) returns (RenderEndResponse);
}

enum SamplerType {
  SAMPLER_TYPE_UNSPECIFIED = 0;
  ALBEDO = 1;
  NORMAL = 2;
  WIRE_FRAME = 3;
  COLOUR = 4;
  SPECTRAL = 5;
}

enum RenderSetupStatus {
  RENDER_SETUP_STATUS_UNKNOWN = 0;
  LOADING_SCENE = 1;
  STREAMING_GEOMETRY = 2;
  STREAMING_TEXTURES = 3;
  BUILDING_ACCELERATION_STRUCTURE = 4;
  READY = 5;
  FAILED = 6;
}

message Vec3 {
  double x = 1;
  double y = 2;
  double z = 3;
}

message TabulatedSpectralConstant {
  repeated double wavelengths = 1;
  repeated double values = 2;
}

message SpectralBackground {
  oneof spectral_properties {
    TabulatedSpectralConstant tabulated = 1;
    double neutral_value = 2;
  }
}

message ImageResolution {
  uint32 width = 1;
  uint32 height = 2;
}

message RenderSetupRequest {
  string scene_name = 1;
  string job_id = 2;
  uint32 num_cores = 3;
  uint32 samples_per_pixel = 4;
  SamplerType sampler = 5;
  ImageResolution image_resolution = 6;
  uint32 max_depth = 7;
  Vec3 background_color = 8;
  Vec3 ink_color = 9;
  string asset_provider = 10;
  SpectralBackground spectral_background = 11;
}

message RenderSetupResponse {
  RenderSetupStatus status = 1;
  string error_message = 2;
}

message RenderTileRequest {
  uint32 strip_height = 1;
  uint32 x0 = 2;
  uint32 y0 = 3;
  uint32 x1 = 4;
  uint32 y1 = 5;
}

message RenderTileResponse {
  uint32 width = 1;
  uint32 height = 2;
  uint32 pos_x = 3;
  uint32 pos_y = 4;
  repeated double pixels = 5;
}

message RenderEndRequest {
}

message RenderEndResponse {
  uint64 total_rays_traced = 1;
}