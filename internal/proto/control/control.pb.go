// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: control.proto

package control

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines the supported sampler types for rendering.
type SamplerType int32

const (
	SamplerType_SAMPLER_TYPE_UNSPECIFIED SamplerType = 0 // Default zero value for enums
	SamplerType_ALBEDO                   SamplerType = 1
	SamplerType_NORMAL                   SamplerType = 2
	SamplerType_WIRE_FRAME               SamplerType = 3 // Using snake_case for enum value
	SamplerType_COLOUR                   SamplerType = 4
)

// Enum value maps for SamplerType.
var (
	SamplerType_name = map[int32]string{
		0: "SAMPLER_TYPE_UNSPECIFIED",
		1: "ALBEDO",
		2: "NORMAL",
		3: "WIRE_FRAME",
		4: "COLOUR",
	}
	SamplerType_value = map[string]int32{
		"SAMPLER_TYPE_UNSPECIFIED": 0,
		"ALBEDO":                   1,
		"NORMAL":                   2,
		"WIRE_FRAME":               3,
		"COLOUR":                   4,
	}
)

func (x SamplerType) Enum() *SamplerType {
	p := new(SamplerType)
	*p = x
	return p
}

func (x SamplerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SamplerType) Descriptor() protoreflect.EnumDescriptor {
	return file_control_proto_enumTypes[0].Descriptor()
}

func (SamplerType) Type() protoreflect.EnumType {
	return &file_control_proto_enumTypes[0]
}

func (x SamplerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SamplerType.Descriptor instead.
func (SamplerType) EnumDescriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{0}
}

// Defines the status of the RenderConfiguration process on the worker.
type RenderSetupStatus int32

const (
	RenderSetupStatus_RENDER_SETUP_STATUS_UNKNOWN RenderSetupStatus = 0 // Default zero value for enums
	RenderSetupStatus_LOADING_SCENE               RenderSetupStatus = 1
	RenderSetupStatus_STREAMING_TEXTURES          RenderSetupStatus = 2
	RenderSetupStatus_READY                       RenderSetupStatus = 3
	RenderSetupStatus_FAILED                      RenderSetupStatus = 4 // Indicates an error occurred during configuration.
)

// Enum value maps for RenderSetupStatus.
var (
	RenderSetupStatus_name = map[int32]string{
		0: "RENDER_SETUP_STATUS_UNKNOWN",
		1: "LOADING_SCENE",
		2: "STREAMING_TEXTURES",
		3: "READY",
		4: "FAILED",
	}
	RenderSetupStatus_value = map[string]int32{
		"RENDER_SETUP_STATUS_UNKNOWN": 0,
		"LOADING_SCENE":               1,
		"STREAMING_TEXTURES":          2,
		"READY":                       3,
		"FAILED":                      4,
	}
)

func (x RenderSetupStatus) Enum() *RenderSetupStatus {
	p := new(RenderSetupStatus)
	*p = x
	return p
}

func (x RenderSetupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RenderSetupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_control_proto_enumTypes[1].Descriptor()
}

func (RenderSetupStatus) Type() protoreflect.EnumType {
	return &file_control_proto_enumTypes[1]
}

func (x RenderSetupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RenderSetupStatus.Descriptor instead.
func (RenderSetupStatus) EnumDescriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{1}
}

// Represents a 3D vector or point with float components, also used for colors.
type Vec3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float32                `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float32                `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z             float32                `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vec3) Reset() {
	*x = Vec3{}
	mi := &file_control_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vec3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vec3) ProtoMessage() {}

func (x *Vec3) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vec3.ProtoReflect.Descriptor instead.
func (*Vec3) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{0}
}

func (x *Vec3) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vec3) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vec3) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Represents the width and height of an image or tile.
type ImageResolution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Width         uint32                 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height        uint32                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageResolution) Reset() {
	*x = ImageResolution{}
	mi := &file_control_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageResolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageResolution) ProtoMessage() {}

func (x *ImageResolution) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageResolution.ProtoReflect.Descriptor instead.
func (*ImageResolution) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{1}
}

func (x *ImageResolution) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageResolution) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Request to configure a worker node for rendering.
type RenderSetupRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SceneName       string                 `protobuf:"bytes,1,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"`                      // The name of the scene to be rendered.
	NumCores        uint32                 `protobuf:"varint,2,opt,name=num_cores,json=numCores,proto3" json:"num_cores,omitempty"`                        // Number of CPU cores the worker should use for rendering.
	SamplesPerPixel uint32                 `protobuf:"varint,3,opt,name=samples_per_pixel,json=samplesPerPixel,proto3" json:"samples_per_pixel,omitempty"` // Number of samples to take per pixel.
	Sampler         SamplerType            `protobuf:"varint,4,opt,name=sampler,proto3,enum=control.SamplerType" json:"sampler,omitempty"`                 // The type of sampler (render mode) to use.
	ImageResolution *ImageResolution       `protobuf:"bytes,5,opt,name=image_resolution,json=imageResolution,proto3" json:"image_resolution,omitempty"`    // The overall image resolution.
	MaxDepth        uint32                 `protobuf:"varint,6,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`                        // Maximum recursion depth for path tracing.
	BackgroundColor *Vec3                  `protobuf:"bytes,7,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`    // The background color of the scene.
	AssetProvider   string                 `protobuf:"bytes,8,opt,name=asset_provider,json=assetProvider,proto3" json:"asset_provider,omitempty"`          // NEW: The network address (host:port) of the asset transport server (e.g., leader).
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RenderSetupRequest) Reset() {
	*x = RenderSetupRequest{}
	mi := &file_control_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderSetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderSetupRequest) ProtoMessage() {}

func (x *RenderSetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderSetupRequest.ProtoReflect.Descriptor instead.
func (*RenderSetupRequest) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{2}
}

func (x *RenderSetupRequest) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

func (x *RenderSetupRequest) GetNumCores() uint32 {
	if x != nil {
		return x.NumCores
	}
	return 0
}

func (x *RenderSetupRequest) GetSamplesPerPixel() uint32 {
	if x != nil {
		return x.SamplesPerPixel
	}
	return 0
}

func (x *RenderSetupRequest) GetSampler() SamplerType {
	if x != nil {
		return x.Sampler
	}
	return SamplerType_SAMPLER_TYPE_UNSPECIFIED
}

func (x *RenderSetupRequest) GetImageResolution() *ImageResolution {
	if x != nil {
		return x.ImageResolution
	}
	return nil
}

func (x *RenderSetupRequest) GetMaxDepth() uint32 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

func (x *RenderSetupRequest) GetBackgroundColor() *Vec3 {
	if x != nil {
		return x.BackgroundColor
	}
	return nil
}

func (x *RenderSetupRequest) GetAssetProvider() string {
	if x != nil {
		return x.AssetProvider
	}
	return ""
}

// Response containing status updates during the RenderConfiguration process.
type RenderSetupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        RenderSetupStatus      `protobuf:"varint,1,opt,name=status,proto3,enum=control.RenderSetupStatus" json:"status,omitempty"` // Current status of the configuration process. // Updated field type
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Error message if status is FAILED.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenderSetupResponse) Reset() {
	*x = RenderSetupResponse{}
	mi := &file_control_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderSetupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderSetupResponse) ProtoMessage() {}

func (x *RenderSetupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderSetupResponse.ProtoReflect.Descriptor instead.
func (*RenderSetupResponse) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{3}
}

func (x *RenderSetupResponse) GetStatus() RenderSetupStatus {
	if x != nil {
		return x.Status
	}
	return RenderSetupStatus_RENDER_SETUP_STATUS_UNKNOWN
}

func (x *RenderSetupResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Request to render a specific tile of the image.
// The worker should render the region defined by [x0, y0] to [x1, y1) (exclusive).
type RenderTileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X0            uint32                 `protobuf:"varint,1,opt,name=x0,proto3" json:"x0,omitempty"` // Start X coordinate (inclusive) of the overall tile in image space.
	Y0            uint32                 `protobuf:"varint,2,opt,name=y0,proto3" json:"y0,omitempty"` // Start Y coordinate (inclusive) of the overall tile in image space.
	X1            uint32                 `protobuf:"varint,3,opt,name=x1,proto3" json:"x1,omitempty"` // End X coordinate (exclusive) of the overall tile in image space.
	Y1            uint32                 `protobuf:"varint,4,opt,name=y1,proto3" json:"y1,omitempty"` // End Y coordinate (exclusive) of the overall tile in image space.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenderTileRequest) Reset() {
	*x = RenderTileRequest{}
	mi := &file_control_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderTileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderTileRequest) ProtoMessage() {}

func (x *RenderTileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderTileRequest.ProtoReflect.Descriptor instead.
func (*RenderTileRequest) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{4}
}

func (x *RenderTileRequest) GetX0() uint32 {
	if x != nil {
		return x.X0
	}
	return 0
}

func (x *RenderTileRequest) GetY0() uint32 {
	if x != nil {
		return x.Y0
	}
	return 0
}

func (x *RenderTileRequest) GetX1() uint32 {
	if x != nil {
		return x.X1
	}
	return 0
}

func (x *RenderTileRequest) GetY1() uint32 {
	if x != nil {
		return x.Y1
	}
	return 0
}

// Response containing a rendered chunk of pixel data for a sub-region within the requested tile.
// The client will receive multiple RenderTileResponse messages for a single RenderTileRequest,
// which it can assemble to form the complete tile.
type RenderTileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Width         uint32                 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`           // Width of this specific pixel chunk (sub-tile).
	Height        uint32                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`         // Height of this specific pixel chunk (sub-tile).
	PosX          uint32                 `protobuf:"varint,3,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"` // X-coordinate of the top-left pixel of this chunk (relative to overall image origin).
	PosY          uint32                 `protobuf:"varint,4,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"` // Y-coordinate of the top-left pixel of this chunk (relative to overall image origin).
	Pixels        []float32              `protobuf:"fixed32,5,rep,packed,name=pixels,proto3" json:"pixels,omitempty"` // Flat array of pixel values (e.g., RGB as [R1, G1, B1, R2, G2, B2...])
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenderTileResponse) Reset() {
	*x = RenderTileResponse{}
	mi := &file_control_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderTileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderTileResponse) ProtoMessage() {}

func (x *RenderTileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderTileResponse.ProtoReflect.Descriptor instead.
func (*RenderTileResponse) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{5}
}

func (x *RenderTileResponse) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *RenderTileResponse) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RenderTileResponse) GetPosX() uint32 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *RenderTileResponse) GetPosY() uint32 {
	if x != nil {
		return x.PosY
	}
	return 0
}

func (x *RenderTileResponse) GetPixels() []float32 {
	if x != nil {
		return x.Pixels
	}
	return nil
}

// Request to signal the worker node that rendering is complete.
// This message can be empty if no specific data is needed.
type RenderEndRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenderEndRequest) Reset() {
	*x = RenderEndRequest{}
	mi := &file_control_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderEndRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderEndRequest) ProtoMessage() {}

func (x *RenderEndRequest) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderEndRequest.ProtoReflect.Descriptor instead.
func (*RenderEndRequest) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{6}
}

// Response containing statistics after rendering is complete.
type RenderEndResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TotalRenderTimeMs uint64                 `protobuf:"varint,1,opt,name=total_render_time_ms,json=totalRenderTimeMs,proto3" json:"total_render_time_ms,omitempty"` // Total time spent rendering in milliseconds.
	TotalRaysTraced   uint64                 `protobuf:"varint,2,opt,name=total_rays_traced,json=totalRaysTraced,proto3" json:"total_rays_traced,omitempty"`         // Total number of rays traced during rendering.
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RenderEndResponse) Reset() {
	*x = RenderEndResponse{}
	mi := &file_control_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderEndResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderEndResponse) ProtoMessage() {}

func (x *RenderEndResponse) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderEndResponse.ProtoReflect.Descriptor instead.
func (*RenderEndResponse) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{7}
}

func (x *RenderEndResponse) GetTotalRenderTimeMs() uint64 {
	if x != nil {
		return x.TotalRenderTimeMs
	}
	return 0
}

func (x *RenderEndResponse) GetTotalRaysTraced() uint64 {
	if x != nil {
		return x.TotalRaysTraced
	}
	return 0
}

var File_control_proto protoreflect.FileDescriptor

const file_control_proto_rawDesc = "" +
	"\n" +
	"\rcontrol.proto\x12\acontrol\"0\n" +
	"\x04Vec3\x12\f\n" +
	"\x01x\x18\x01 \x01(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\x02R\x01y\x12\f\n" +
	"\x01z\x18\x03 \x01(\x02R\x01z\"?\n" +
	"\x0fImageResolution\x12\x14\n" +
	"\x05width\x18\x01 \x01(\rR\x05width\x12\x16\n" +
	"\x06height\x18\x02 \x01(\rR\x06height\"\xef\x02\n" +
	"\x12RenderSetupRequest\x12\x1d\n" +
	"\n" +
	"scene_name\x18\x01 \x01(\tR\tsceneName\x12\x1b\n" +
	"\tnum_cores\x18\x02 \x01(\rR\bnumCores\x12*\n" +
	"\x11samples_per_pixel\x18\x03 \x01(\rR\x0fsamplesPerPixel\x12.\n" +
	"\asampler\x18\x04 \x01(\x0e2\x14.control.SamplerTypeR\asampler\x12C\n" +
	"\x10image_resolution\x18\x05 \x01(\v2\x18.control.ImageResolutionR\x0fimageResolution\x12\x1b\n" +
	"\tmax_depth\x18\x06 \x01(\rR\bmaxDepth\x128\n" +
	"\x10background_color\x18\a \x01(\v2\r.control.Vec3R\x0fbackgroundColor\x12%\n" +
	"\x0easset_provider\x18\b \x01(\tR\rassetProvider\"n\n" +
	"\x13RenderSetupResponse\x122\n" +
	"\x06status\x18\x01 \x01(\x0e2\x1a.control.RenderSetupStatusR\x06status\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\"S\n" +
	"\x11RenderTileRequest\x12\x0e\n" +
	"\x02x0\x18\x01 \x01(\rR\x02x0\x12\x0e\n" +
	"\x02y0\x18\x02 \x01(\rR\x02y0\x12\x0e\n" +
	"\x02x1\x18\x03 \x01(\rR\x02x1\x12\x0e\n" +
	"\x02y1\x18\x04 \x01(\rR\x02y1\"\x84\x01\n" +
	"\x12RenderTileResponse\x12\x14\n" +
	"\x05width\x18\x01 \x01(\rR\x05width\x12\x16\n" +
	"\x06height\x18\x02 \x01(\rR\x06height\x12\x13\n" +
	"\x05pos_x\x18\x03 \x01(\rR\x04posX\x12\x13\n" +
	"\x05pos_y\x18\x04 \x01(\rR\x04posY\x12\x16\n" +
	"\x06pixels\x18\x05 \x03(\x02R\x06pixels\"\x12\n" +
	"\x10RenderEndRequest\"p\n" +
	"\x11RenderEndResponse\x12/\n" +
	"\x14total_render_time_ms\x18\x01 \x01(\x04R\x11totalRenderTimeMs\x12*\n" +
	"\x11total_rays_traced\x18\x02 \x01(\x04R\x0ftotalRaysTraced*_\n" +
	"\vSamplerType\x12\x1c\n" +
	"\x18SAMPLER_TYPE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06ALBEDO\x10\x01\x12\n" +
	"\n" +
	"\x06NORMAL\x10\x02\x12\x0e\n" +
	"\n" +
	"WIRE_FRAME\x10\x03\x12\n" +
	"\n" +
	"\x06COLOUR\x10\x04*v\n" +
	"\x11RenderSetupStatus\x12\x1f\n" +
	"\x1bRENDER_SETUP_STATUS_UNKNOWN\x10\x00\x12\x11\n" +
	"\rLOADING_SCENE\x10\x01\x12\x16\n" +
	"\x12STREAMING_TEXTURES\x10\x02\x12\t\n" +
	"\x05READY\x10\x03\x12\n" +
	"\n" +
	"\x06FAILED\x10\x042\xef\x01\n" +
	"\x14RenderControlService\x12J\n" +
	"\vRenderSetup\x12\x1b.control.RenderSetupRequest\x1a\x1c.control.RenderSetupResponse0\x01\x12G\n" +
	"\n" +
	"RenderTile\x12\x1a.control.RenderTileRequest\x1a\x1b.control.RenderTileResponse0\x01\x12B\n" +
	"\tRenderEnd\x12\x19.control.RenderEndRequest\x1a\x1a.control.RenderEndResponseB:Z8github.com/flynn-nrg/izpi/internal/proto/control;controlb\x06proto3"

var (
	file_control_proto_rawDescOnce sync.Once
	file_control_proto_rawDescData []byte
)

func file_control_proto_rawDescGZIP() []byte {
	file_control_proto_rawDescOnce.Do(func() {
		file_control_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_control_proto_rawDesc), len(file_control_proto_rawDesc)))
	})
	return file_control_proto_rawDescData
}

var file_control_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_control_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_control_proto_goTypes = []any{
	(SamplerType)(0),            // 0: control.SamplerType
	(RenderSetupStatus)(0),      // 1: control.RenderSetupStatus
	(*Vec3)(nil),                // 2: control.Vec3
	(*ImageResolution)(nil),     // 3: control.ImageResolution
	(*RenderSetupRequest)(nil),  // 4: control.RenderSetupRequest
	(*RenderSetupResponse)(nil), // 5: control.RenderSetupResponse
	(*RenderTileRequest)(nil),   // 6: control.RenderTileRequest
	(*RenderTileResponse)(nil),  // 7: control.RenderTileResponse
	(*RenderEndRequest)(nil),    // 8: control.RenderEndRequest
	(*RenderEndResponse)(nil),   // 9: control.RenderEndResponse
}
var file_control_proto_depIdxs = []int32{
	0, // 0: control.RenderSetupRequest.sampler:type_name -> control.SamplerType
	3, // 1: control.RenderSetupRequest.image_resolution:type_name -> control.ImageResolution
	2, // 2: control.RenderSetupRequest.background_color:type_name -> control.Vec3
	1, // 3: control.RenderSetupResponse.status:type_name -> control.RenderSetupStatus
	4, // 4: control.RenderControlService.RenderSetup:input_type -> control.RenderSetupRequest
	6, // 5: control.RenderControlService.RenderTile:input_type -> control.RenderTileRequest
	8, // 6: control.RenderControlService.RenderEnd:input_type -> control.RenderEndRequest
	5, // 7: control.RenderControlService.RenderSetup:output_type -> control.RenderSetupResponse
	7, // 8: control.RenderControlService.RenderTile:output_type -> control.RenderTileResponse
	9, // 9: control.RenderControlService.RenderEnd:output_type -> control.RenderEndResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_control_proto_init() }
func file_control_proto_init() {
	if File_control_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_control_proto_rawDesc), len(file_control_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_control_proto_goTypes,
		DependencyIndexes: file_control_proto_depIdxs,
		EnumInfos:         file_control_proto_enumTypes,
		MessageInfos:      file_control_proto_msgTypes,
	}.Build()
	File_control_proto = out.File
	file_control_proto_goTypes = nil
	file_control_proto_depIdxs = nil
}
