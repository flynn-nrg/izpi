// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: control.proto

package control

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RenderControlService_RenderConfiguration_FullMethodName = "/control.RenderControlService/RenderConfiguration"
	RenderControlService_RenderTile_FullMethodName          = "/control.RenderControlService/RenderTile"
	RenderControlService_RenderEnd_FullMethodName           = "/control.RenderControlService/RenderEnd"
)

// RenderControlServiceClient is the client API for RenderControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for controlling render operations on worker nodes.
type RenderControlServiceClient interface {
	// Unary RPC to send render configuration to a worker node.
	// The worker should configure itself based on these parameters.
	RenderConfiguration(ctx context.Context, in *RenderConfigurationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Streaming RPC to request a worker node to render a specific tile of the image.
	// The server streams back chunks of pixel data as they are rendered.
	RenderTile(ctx context.Context, in *RenderTileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RenderTileResponse], error)
	// Unary RPC to signal the worker node that the rendering process is complete.
	// The worker should clean up resources and can potentially exit.
	RenderEnd(ctx context.Context, in *RenderEndRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type renderControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRenderControlServiceClient(cc grpc.ClientConnInterface) RenderControlServiceClient {
	return &renderControlServiceClient{cc}
}

func (c *renderControlServiceClient) RenderConfiguration(ctx context.Context, in *RenderConfigurationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RenderControlService_RenderConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renderControlServiceClient) RenderTile(ctx context.Context, in *RenderTileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RenderTileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RenderControlService_ServiceDesc.Streams[0], RenderControlService_RenderTile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RenderTileRequest, RenderTileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RenderControlService_RenderTileClient = grpc.ServerStreamingClient[RenderTileResponse]

func (c *renderControlServiceClient) RenderEnd(ctx context.Context, in *RenderEndRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RenderControlService_RenderEnd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RenderControlServiceServer is the server API for RenderControlService service.
// All implementations must embed UnimplementedRenderControlServiceServer
// for forward compatibility.
//
// Service for controlling render operations on worker nodes.
type RenderControlServiceServer interface {
	// Unary RPC to send render configuration to a worker node.
	// The worker should configure itself based on these parameters.
	RenderConfiguration(context.Context, *RenderConfigurationRequest) (*emptypb.Empty, error)
	// Streaming RPC to request a worker node to render a specific tile of the image.
	// The server streams back chunks of pixel data as they are rendered.
	RenderTile(*RenderTileRequest, grpc.ServerStreamingServer[RenderTileResponse]) error
	// Unary RPC to signal the worker node that the rendering process is complete.
	// The worker should clean up resources and can potentially exit.
	RenderEnd(context.Context, *RenderEndRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRenderControlServiceServer()
}

// UnimplementedRenderControlServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRenderControlServiceServer struct{}

func (UnimplementedRenderControlServiceServer) RenderConfiguration(context.Context, *RenderConfigurationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderConfiguration not implemented")
}
func (UnimplementedRenderControlServiceServer) RenderTile(*RenderTileRequest, grpc.ServerStreamingServer[RenderTileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RenderTile not implemented")
}
func (UnimplementedRenderControlServiceServer) RenderEnd(context.Context, *RenderEndRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderEnd not implemented")
}
func (UnimplementedRenderControlServiceServer) mustEmbedUnimplementedRenderControlServiceServer() {}
func (UnimplementedRenderControlServiceServer) testEmbeddedByValue()                              {}

// UnsafeRenderControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RenderControlServiceServer will
// result in compilation errors.
type UnsafeRenderControlServiceServer interface {
	mustEmbedUnimplementedRenderControlServiceServer()
}

func RegisterRenderControlServiceServer(s grpc.ServiceRegistrar, srv RenderControlServiceServer) {
	// If the following call pancis, it indicates UnimplementedRenderControlServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RenderControlService_ServiceDesc, srv)
}

func _RenderControlService_RenderConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderControlServiceServer).RenderConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RenderControlService_RenderConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderControlServiceServer).RenderConfiguration(ctx, req.(*RenderConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RenderControlService_RenderTile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RenderTileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RenderControlServiceServer).RenderTile(m, &grpc.GenericServerStream[RenderTileRequest, RenderTileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RenderControlService_RenderTileServer = grpc.ServerStreamingServer[RenderTileResponse]

func _RenderControlService_RenderEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderControlServiceServer).RenderEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RenderControlService_RenderEnd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderControlServiceServer).RenderEnd(ctx, req.(*RenderEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RenderControlService_ServiceDesc is the grpc.ServiceDesc for RenderControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RenderControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.RenderControlService",
	HandlerType: (*RenderControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RenderConfiguration",
			Handler:    _RenderControlService_RenderConfiguration_Handler,
		},
		{
			MethodName: "RenderEnd",
			Handler:    _RenderControlService_RenderEnd_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RenderTile",
			Handler:       _RenderControlService_RenderTile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "control.proto",
}
