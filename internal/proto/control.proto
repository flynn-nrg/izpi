syntax = "proto3";

// Your repository path for Go package generation.
option go_package = "github.com/flynn-nrg/izpi/internal/proto;proto";

// Specify the Protobuf edition. "2023" is the current recommended edition.
edition = "2023";

// Service for controlling render operations on worker nodes.
service RenderControlService {
  // Unary RPC to send render configuration to a worker node.
  // The worker should configure itself based on these parameters.
  rpc RenderConfiguration (RenderConfigurationRequest) returns (google.protobuf.Empty);

  // Streaming RPC to request a worker node to render a specific tile of the image.
  // The server streams back chunks of pixel data as they are rendered.
  rpc RenderTile (RenderTileRequest) returns (stream RenderTileResponse);

  // Unary RPC to signal the worker node that the rendering process is complete.
  // The worker should clean up resources and can potentially exit.
  rpc RenderEnd (RenderEndRequest) returns (google.protobuf.Empty);
}

// --- Imports ---
// This is needed for the google.protobuf.Empty message
import "google/protobuf/empty.proto";

// --- Enums ---

// Defines the supported sampler types for rendering.
enum SamplerType {
  SAMPLER_TYPE_UNSPECIFIED = 0; // Default zero value for enums
  ALBEDO = 1;
  NORMAL = 2;
  WIRE_FRAME = 3; // Using snake_case for enum value
  COLOUR = 4;
}

// --- Core Data Structures ---

// Represents a 3D vector or point with float components, also used for colors.
message Vec3 {
  float x = 1;
  float y = 2;
  float z = 3;
}

// Represents the width and height of an image or tile.
message ImageResolution {
  uint32 width = 1;
  uint32 height = 2;
}

// --- RenderConfiguration RPC Messages ---

// Request to configure a worker node for rendering.
message RenderConfigurationRequest {
  string scene_name = 1;           // The name of the scene to be rendered.
  uint32 num_cores = 2;            // Number of CPU cores the worker should use for rendering.
  uint32 samples_per_pixel = 3;    // Number of samples to take per pixel.
  SamplerType sampler = 4;         // The type of sampler (render mode) to use.
  ImageResolution image_resolution = 5; // The overall image resolution.
  uint32 max_depth = 6;            // Maximum recursion depth for path tracing.
  Vec3 background_color = 7;       // The background color of the scene.
}

// --- RenderTile RPC Messages ---

// Request to render a specific tile of the image.
// The worker should render the region defined by [x0, y0] to [x1, y1) (exclusive).
message RenderTileRequest {
  uint32 x0 = 1; // Start X coordinate (inclusive) of the overall tile in image space.
  uint32 y0 = 2; // Start Y coordinate (inclusive) of the overall tile in image space.
  uint32 x1 = 3; // End X coordinate (exclusive) of the overall tile in image space.
  uint32 y1 = 4; // End Y coordinate (exclusive) of the overall tile in image space.
}

// Response containing a rendered chunk of pixel data for a sub-region within the requested tile.
// The client will receive multiple RenderTileResponse messages for a single RenderTileRequest,
// which it can assemble to form the complete tile.
message RenderTileResponse {
  uint32 width = 1;  // Width of this specific pixel chunk (sub-tile).
  uint32 height = 2; // Height of this specific pixel chunk (sub-tile).
  uint32 pos_x = 3;  // X-coordinate of the top-left pixel of this chunk (relative to overall image origin).
  uint32 pos_y = 4;  // Y-coordinate of the top-left pixel of this chunk (relative to overall image origin).
  repeated float pixels = 5; // Flat array of pixel values (e.g., RGB as [R1, G1, B1, R2, G2, B2...])
}

// --- RenderEnd RPC Messages ---

// Request to signal the worker node that rendering is complete.
// This message can be empty if no specific data is needed.
message RenderEndRequest {
  // string configuration_id = 1; // Optional: if you need to end a specific configuration
}