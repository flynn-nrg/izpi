// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: transport.proto

package transport

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TextureType int32

const (
	TextureType_TEXTURE_TYPE_UNSPECIFIED TextureType = 0
	TextureType_CONSTANT                 TextureType = 1
	TextureType_CHECKER                  TextureType = 2
	TextureType_IMAGE                    TextureType = 3
	TextureType_NOISE                    TextureType = 4
	TextureType_SPECTRAL_CONSTANT        TextureType = 5
	TextureType_SPECTRAL_CHECKER         TextureType = 6
)

// Enum value maps for TextureType.
var (
	TextureType_name = map[int32]string{
		0: "TEXTURE_TYPE_UNSPECIFIED",
		1: "CONSTANT",
		2: "CHECKER",
		3: "IMAGE",
		4: "NOISE",
		5: "SPECTRAL_CONSTANT",
		6: "SPECTRAL_CHECKER",
	}
	TextureType_value = map[string]int32{
		"TEXTURE_TYPE_UNSPECIFIED": 0,
		"CONSTANT":                 1,
		"CHECKER":                  2,
		"IMAGE":                    3,
		"NOISE":                    4,
		"SPECTRAL_CONSTANT":        5,
		"SPECTRAL_CHECKER":         6,
	}
)

func (x TextureType) Enum() *TextureType {
	p := new(TextureType)
	*p = x
	return p
}

func (x TextureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextureType) Descriptor() protoreflect.EnumDescriptor {
	return file_transport_proto_enumTypes[0].Descriptor()
}

func (TextureType) Type() protoreflect.EnumType {
	return &file_transport_proto_enumTypes[0]
}

func (x TextureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextureType.Descriptor instead.
func (TextureType) EnumDescriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0}
}

type TexturePixelFormat int32

const (
	TexturePixelFormat_TEXTURE_PIXEL_FORMAT_UNSPECIFIED TexturePixelFormat = 0
	TexturePixelFormat_FLOAT64                          TexturePixelFormat = 1
)

// Enum value maps for TexturePixelFormat.
var (
	TexturePixelFormat_name = map[int32]string{
		0: "TEXTURE_PIXEL_FORMAT_UNSPECIFIED",
		1: "FLOAT64",
	}
	TexturePixelFormat_value = map[string]int32{
		"TEXTURE_PIXEL_FORMAT_UNSPECIFIED": 0,
		"FLOAT64":                          1,
	}
)

func (x TexturePixelFormat) Enum() *TexturePixelFormat {
	p := new(TexturePixelFormat)
	*p = x
	return p
}

func (x TexturePixelFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TexturePixelFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_transport_proto_enumTypes[1].Descriptor()
}

func (TexturePixelFormat) Type() protoreflect.EnumType {
	return &file_transport_proto_enumTypes[1]
}

func (x TexturePixelFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TexturePixelFormat.Descriptor instead.
func (TexturePixelFormat) EnumDescriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{1}
}

type MaterialType int32

const (
	MaterialType_MATERIAL_TYPE_UNSPECIFIED MaterialType = 0
	MaterialType_DIELECTRIC                MaterialType = 1
	MaterialType_DIFFUSE_LIGHT             MaterialType = 2
	MaterialType_ISOTROPIC                 MaterialType = 3
	MaterialType_LAMBERT                   MaterialType = 4
	MaterialType_METAL                     MaterialType = 5
	MaterialType_PBR                       MaterialType = 6
)

// Enum value maps for MaterialType.
var (
	MaterialType_name = map[int32]string{
		0: "MATERIAL_TYPE_UNSPECIFIED",
		1: "DIELECTRIC",
		2: "DIFFUSE_LIGHT",
		3: "ISOTROPIC",
		4: "LAMBERT",
		5: "METAL",
		6: "PBR",
	}
	MaterialType_value = map[string]int32{
		"MATERIAL_TYPE_UNSPECIFIED": 0,
		"DIELECTRIC":                1,
		"DIFFUSE_LIGHT":             2,
		"ISOTROPIC":                 3,
		"LAMBERT":                   4,
		"METAL":                     5,
		"PBR":                       6,
	}
)

func (x MaterialType) Enum() *MaterialType {
	p := new(MaterialType)
	*p = x
	return p
}

func (x MaterialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MaterialType) Descriptor() protoreflect.EnumDescriptor {
	return file_transport_proto_enumTypes[2].Descriptor()
}

func (MaterialType) Type() protoreflect.EnumType {
	return &file_transport_proto_enumTypes[2]
}

func (x MaterialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MaterialType.Descriptor instead.
func (MaterialType) EnumDescriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{2}
}

type ColourRepresentation int32

const (
	ColourRepresentation_COLOUR_REPRESENTATION_UNSPECIFIED ColourRepresentation = 0
	ColourRepresentation_RGB                               ColourRepresentation = 1
	ColourRepresentation_SPECTRAL                          ColourRepresentation = 2
)

// Enum value maps for ColourRepresentation.
var (
	ColourRepresentation_name = map[int32]string{
		0: "COLOUR_REPRESENTATION_UNSPECIFIED",
		1: "RGB",
		2: "SPECTRAL",
	}
	ColourRepresentation_value = map[string]int32{
		"COLOUR_REPRESENTATION_UNSPECIFIED": 0,
		"RGB":                               1,
		"SPECTRAL":                          2,
	}
)

func (x ColourRepresentation) Enum() *ColourRepresentation {
	p := new(ColourRepresentation)
	*p = x
	return p
}

func (x ColourRepresentation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColourRepresentation) Descriptor() protoreflect.EnumDescriptor {
	return file_transport_proto_enumTypes[3].Descriptor()
}

func (ColourRepresentation) Type() protoreflect.EnumType {
	return &file_transport_proto_enumTypes[3]
}

func (x ColourRepresentation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColourRepresentation.Descriptor instead.
func (ColourRepresentation) EnumDescriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{3}
}

type ImageTextureMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Width         uint32                 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height        uint32                 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Channels      uint32                 `protobuf:"varint,4,opt,name=channels,proto3" json:"channels,omitempty"`
	PixelFormat   TexturePixelFormat     `protobuf:"varint,5,opt,name=pixel_format,json=pixelFormat,proto3,enum=transport.TexturePixelFormat" json:"pixel_format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageTextureMetadata) Reset() {
	*x = ImageTextureMetadata{}
	mi := &file_transport_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageTextureMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageTextureMetadata) ProtoMessage() {}

func (x *ImageTextureMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageTextureMetadata.ProtoReflect.Descriptor instead.
func (*ImageTextureMetadata) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0}
}

func (x *ImageTextureMetadata) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ImageTextureMetadata) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageTextureMetadata) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImageTextureMetadata) GetChannels() uint32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *ImageTextureMetadata) GetPixelFormat() TexturePixelFormat {
	if x != nil {
		return x.PixelFormat
	}
	return TexturePixelFormat_TEXTURE_PIXEL_FORMAT_UNSPECIFIED
}

// Represents a 3D vector or point with float components.
type Vec3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float32                `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float32                `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z             float32                `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vec3) Reset() {
	*x = Vec3{}
	mi := &file_transport_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vec3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vec3) ProtoMessage() {}

func (x *Vec3) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vec3.ProtoReflect.Descriptor instead.
func (*Vec3) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{1}
}

func (x *Vec3) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vec3) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vec3) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Represents a 2D vector or UV coordinate with float components.
type Vec2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	U             float32                `protobuf:"fixed32,1,opt,name=u,proto3" json:"u,omitempty"`
	V             float32                `protobuf:"fixed32,2,opt,name=v,proto3" json:"v,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vec2) Reset() {
	*x = Vec2{}
	mi := &file_transport_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vec2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vec2) ProtoMessage() {}

func (x *Vec2) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vec2.ProtoReflect.Descriptor instead.
func (*Vec2) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{2}
}

func (x *Vec2) GetU() float32 {
	if x != nil {
		return x.U
	}
	return 0
}

func (x *Vec2) GetV() float32 {
	if x != nil {
		return x.V
	}
	return 0
}

// Represents the camera settings for the scene.
type Camera struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lookfrom      *Vec3                  `protobuf:"bytes,1,opt,name=lookfrom,proto3" json:"lookfrom,omitempty"`
	Lookat        *Vec3                  `protobuf:"bytes,2,opt,name=lookat,proto3" json:"lookat,omitempty"`
	Vup           *Vec3                  `protobuf:"bytes,3,opt,name=vup,proto3" json:"vup,omitempty"`
	Vfov          float32                `protobuf:"fixed32,4,opt,name=vfov,proto3" json:"vfov,omitempty"`
	Aspect        float32                `protobuf:"fixed32,5,opt,name=aspect,proto3" json:"aspect,omitempty"`
	Aperture      float32                `protobuf:"fixed32,6,opt,name=aperture,proto3" json:"aperture,omitempty"`
	Focusdist     float32                `protobuf:"fixed32,7,opt,name=focusdist,proto3" json:"focusdist,omitempty"`
	Time0         float32                `protobuf:"fixed32,8,opt,name=time0,proto3" json:"time0,omitempty"`
	Time1         float32                `protobuf:"fixed32,9,opt,name=time1,proto3" json:"time1,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Camera) Reset() {
	*x = Camera{}
	mi := &file_transport_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Camera) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Camera) ProtoMessage() {}

func (x *Camera) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Camera.ProtoReflect.Descriptor instead.
func (*Camera) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{3}
}

func (x *Camera) GetLookfrom() *Vec3 {
	if x != nil {
		return x.Lookfrom
	}
	return nil
}

func (x *Camera) GetLookat() *Vec3 {
	if x != nil {
		return x.Lookat
	}
	return nil
}

func (x *Camera) GetVup() *Vec3 {
	if x != nil {
		return x.Vup
	}
	return nil
}

func (x *Camera) GetVfov() float32 {
	if x != nil {
		return x.Vfov
	}
	return 0
}

func (x *Camera) GetAspect() float32 {
	if x != nil {
		return x.Aspect
	}
	return 0
}

func (x *Camera) GetAperture() float32 {
	if x != nil {
		return x.Aperture
	}
	return 0
}

func (x *Camera) GetFocusdist() float32 {
	if x != nil {
		return x.Focusdist
	}
	return 0
}

func (x *Camera) GetTime0() float32 {
	if x != nil {
		return x.Time0
	}
	return 0
}

func (x *Camera) GetTime1() float32 {
	if x != nil {
		return x.Time1
	}
	return 0
}

// Represents different types of textures.
type Texture struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  TextureType            `protobuf:"varint,2,opt,name=type,proto3,enum=transport.TextureType" json:"type,omitempty"`
	// Types that are valid to be assigned to TextureProperties:
	//
	//	*Texture_Constant
	//	*Texture_Checker
	//	*Texture_Image
	//	*Texture_Noise
	//	*Texture_SpectralConstant
	//	*Texture_SpectralChecker
	TextureProperties isTexture_TextureProperties `protobuf_oneof:"texture_properties"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Texture) Reset() {
	*x = Texture{}
	mi := &file_transport_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Texture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Texture) ProtoMessage() {}

func (x *Texture) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Texture.ProtoReflect.Descriptor instead.
func (*Texture) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{4}
}

func (x *Texture) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Texture) GetType() TextureType {
	if x != nil {
		return x.Type
	}
	return TextureType_TEXTURE_TYPE_UNSPECIFIED
}

func (x *Texture) GetTextureProperties() isTexture_TextureProperties {
	if x != nil {
		return x.TextureProperties
	}
	return nil
}

func (x *Texture) GetConstant() *ConstantTexture {
	if x != nil {
		if x, ok := x.TextureProperties.(*Texture_Constant); ok {
			return x.Constant
		}
	}
	return nil
}

func (x *Texture) GetChecker() *CheckerTexture {
	if x != nil {
		if x, ok := x.TextureProperties.(*Texture_Checker); ok {
			return x.Checker
		}
	}
	return nil
}

func (x *Texture) GetImage() *ImageTexture {
	if x != nil {
		if x, ok := x.TextureProperties.(*Texture_Image); ok {
			return x.Image
		}
	}
	return nil
}

func (x *Texture) GetNoise() *NoiseTexture {
	if x != nil {
		if x, ok := x.TextureProperties.(*Texture_Noise); ok {
			return x.Noise
		}
	}
	return nil
}

func (x *Texture) GetSpectralConstant() *SpectralConstantTexture {
	if x != nil {
		if x, ok := x.TextureProperties.(*Texture_SpectralConstant); ok {
			return x.SpectralConstant
		}
	}
	return nil
}

func (x *Texture) GetSpectralChecker() *SpectralCheckerTexture {
	if x != nil {
		if x, ok := x.TextureProperties.(*Texture_SpectralChecker); ok {
			return x.SpectralChecker
		}
	}
	return nil
}

type isTexture_TextureProperties interface {
	isTexture_TextureProperties()
}

type Texture_Constant struct {
	Constant *ConstantTexture `protobuf:"bytes,3,opt,name=constant,proto3,oneof"`
}

type Texture_Checker struct {
	Checker *CheckerTexture `protobuf:"bytes,4,opt,name=checker,proto3,oneof"`
}

type Texture_Image struct {
	Image *ImageTexture `protobuf:"bytes,5,opt,name=image,proto3,oneof"`
}

type Texture_Noise struct {
	Noise *NoiseTexture `protobuf:"bytes,6,opt,name=noise,proto3,oneof"`
}

type Texture_SpectralConstant struct {
	SpectralConstant *SpectralConstantTexture `protobuf:"bytes,7,opt,name=spectral_constant,json=spectralConstant,proto3,oneof"`
}

type Texture_SpectralChecker struct {
	SpectralChecker *SpectralCheckerTexture `protobuf:"bytes,8,opt,name=spectral_checker,json=spectralChecker,proto3,oneof"`
}

func (*Texture_Constant) isTexture_TextureProperties() {}

func (*Texture_Checker) isTexture_TextureProperties() {}

func (*Texture_Image) isTexture_TextureProperties() {}

func (*Texture_Noise) isTexture_TextureProperties() {}

func (*Texture_SpectralConstant) isTexture_TextureProperties() {}

func (*Texture_SpectralChecker) isTexture_TextureProperties() {}

// Represents a constant color texture.
type ConstantTexture struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *Vec3                  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConstantTexture) Reset() {
	*x = ConstantTexture{}
	mi := &file_transport_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstantTexture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstantTexture) ProtoMessage() {}

func (x *ConstantTexture) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstantTexture.ProtoReflect.Descriptor instead.
func (*ConstantTexture) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{5}
}

func (x *ConstantTexture) GetValue() *Vec3 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents a checkerboard texture.
type CheckerTexture struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Odd           *Texture               `protobuf:"bytes,1,opt,name=odd,proto3" json:"odd,omitempty"`
	Even          *Texture               `protobuf:"bytes,2,opt,name=even,proto3" json:"even,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckerTexture) Reset() {
	*x = CheckerTexture{}
	mi := &file_transport_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckerTexture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckerTexture) ProtoMessage() {}

func (x *CheckerTexture) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckerTexture.ProtoReflect.Descriptor instead.
func (*CheckerTexture) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{6}
}

func (x *CheckerTexture) GetOdd() *Texture {
	if x != nil {
		return x.Odd
	}
	return nil
}

func (x *CheckerTexture) GetEven() *Texture {
	if x != nil {
		return x.Even
	}
	return nil
}

// Represents an image texture.
type ImageTexture struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageTexture) Reset() {
	*x = ImageTexture{}
	mi := &file_transport_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageTexture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageTexture) ProtoMessage() {}

func (x *ImageTexture) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageTexture.ProtoReflect.Descriptor instead.
func (*ImageTexture) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{7}
}

func (x *ImageTexture) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// Represents a noise texture.
type NoiseTexture struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scale         float32                `protobuf:"fixed32,1,opt,name=scale,proto3" json:"scale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoiseTexture) Reset() {
	*x = NoiseTexture{}
	mi := &file_transport_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoiseTexture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoiseTexture) ProtoMessage() {}

func (x *NoiseTexture) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoiseTexture.ProtoReflect.Descriptor instead.
func (*NoiseTexture) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{8}
}

func (x *NoiseTexture) GetScale() float32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

// Represents a spectral constant texture with Gaussian or tabulated response.
type SpectralConstantTexture struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to SpectralProperties:
	//
	//	*SpectralConstantTexture_Gaussian
	//	*SpectralConstantTexture_Tabulated
	//	*SpectralConstantTexture_Neutral
	SpectralProperties isSpectralConstantTexture_SpectralProperties `protobuf_oneof:"spectral_properties"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SpectralConstantTexture) Reset() {
	*x = SpectralConstantTexture{}
	mi := &file_transport_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpectralConstantTexture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpectralConstantTexture) ProtoMessage() {}

func (x *SpectralConstantTexture) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpectralConstantTexture.ProtoReflect.Descriptor instead.
func (*SpectralConstantTexture) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{9}
}

func (x *SpectralConstantTexture) GetSpectralProperties() isSpectralConstantTexture_SpectralProperties {
	if x != nil {
		return x.SpectralProperties
	}
	return nil
}

func (x *SpectralConstantTexture) GetGaussian() *GaussianSpectralConstant {
	if x != nil {
		if x, ok := x.SpectralProperties.(*SpectralConstantTexture_Gaussian); ok {
			return x.Gaussian
		}
	}
	return nil
}

func (x *SpectralConstantTexture) GetTabulated() *TabulatedSpectralConstant {
	if x != nil {
		if x, ok := x.SpectralProperties.(*SpectralConstantTexture_Tabulated); ok {
			return x.Tabulated
		}
	}
	return nil
}

func (x *SpectralConstantTexture) GetNeutral() *NeutralSpectralConstant {
	if x != nil {
		if x, ok := x.SpectralProperties.(*SpectralConstantTexture_Neutral); ok {
			return x.Neutral
		}
	}
	return nil
}

type isSpectralConstantTexture_SpectralProperties interface {
	isSpectralConstantTexture_SpectralProperties()
}

type SpectralConstantTexture_Gaussian struct {
	Gaussian *GaussianSpectralConstant `protobuf:"bytes,1,opt,name=gaussian,proto3,oneof"`
}

type SpectralConstantTexture_Tabulated struct {
	Tabulated *TabulatedSpectralConstant `protobuf:"bytes,2,opt,name=tabulated,proto3,oneof"`
}

type SpectralConstantTexture_Neutral struct {
	Neutral *NeutralSpectralConstant `protobuf:"bytes,3,opt,name=neutral,proto3,oneof"`
}

func (*SpectralConstantTexture_Gaussian) isSpectralConstantTexture_SpectralProperties() {}

func (*SpectralConstantTexture_Tabulated) isSpectralConstantTexture_SpectralProperties() {}

func (*SpectralConstantTexture_Neutral) isSpectralConstantTexture_SpectralProperties() {}

// Represents a Gaussian spectral response.
type GaussianSpectralConstant struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PeakValue        float32                `protobuf:"fixed32,1,opt,name=peak_value,json=peakValue,proto3" json:"peak_value,omitempty"`                      // Maximum reflectance (0.0 to 1.0)
	CenterWavelength float32                `protobuf:"fixed32,2,opt,name=center_wavelength,json=centerWavelength,proto3" json:"center_wavelength,omitempty"` // Wavelength where response is maximum (380-750nm)
	Width            float32                `protobuf:"fixed32,3,opt,name=width,proto3" json:"width,omitempty"`                                               // Width of the response curve
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GaussianSpectralConstant) Reset() {
	*x = GaussianSpectralConstant{}
	mi := &file_transport_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GaussianSpectralConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaussianSpectralConstant) ProtoMessage() {}

func (x *GaussianSpectralConstant) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GaussianSpectralConstant.ProtoReflect.Descriptor instead.
func (*GaussianSpectralConstant) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{10}
}

func (x *GaussianSpectralConstant) GetPeakValue() float32 {
	if x != nil {
		return x.PeakValue
	}
	return 0
}

func (x *GaussianSpectralConstant) GetCenterWavelength() float32 {
	if x != nil {
		return x.CenterWavelength
	}
	return 0
}

func (x *GaussianSpectralConstant) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

// Represents a tabulated spectral response.
type TabulatedSpectralConstant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Wavelengths   []float32              `protobuf:"fixed32,1,rep,packed,name=wavelengths,proto3" json:"wavelengths,omitempty"` // Array of wavelengths in nanometers
	Values        []float32              `protobuf:"fixed32,2,rep,packed,name=values,proto3" json:"values,omitempty"`           // Array of spectral values at each wavelength
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TabulatedSpectralConstant) Reset() {
	*x = TabulatedSpectralConstant{}
	mi := &file_transport_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabulatedSpectralConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabulatedSpectralConstant) ProtoMessage() {}

func (x *TabulatedSpectralConstant) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabulatedSpectralConstant.ProtoReflect.Descriptor instead.
func (*TabulatedSpectralConstant) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{11}
}

func (x *TabulatedSpectralConstant) GetWavelengths() []float32 {
	if x != nil {
		return x.Wavelengths
	}
	return nil
}

func (x *TabulatedSpectralConstant) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Represents a neutral spectral response (white, gray, black).
type NeutralSpectralConstant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reflectance   float32                `protobuf:"fixed32,1,opt,name=reflectance,proto3" json:"reflectance,omitempty"` // Reflectance value (0.0 to 1.0)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NeutralSpectralConstant) Reset() {
	*x = NeutralSpectralConstant{}
	mi := &file_transport_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NeutralSpectralConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeutralSpectralConstant) ProtoMessage() {}

func (x *NeutralSpectralConstant) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeutralSpectralConstant.ProtoReflect.Descriptor instead.
func (*NeutralSpectralConstant) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{12}
}

func (x *NeutralSpectralConstant) GetReflectance() float32 {
	if x != nil {
		return x.Reflectance
	}
	return 0
}

// Represents a spectral checker texture.
type SpectralCheckerTexture struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Odd           *SpectralConstantTexture `protobuf:"bytes,1,opt,name=odd,proto3" json:"odd,omitempty"`   // Spectral texture for odd squares
	Even          *SpectralConstantTexture `protobuf:"bytes,2,opt,name=even,proto3" json:"even,omitempty"` // Spectral texture for even squares
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpectralCheckerTexture) Reset() {
	*x = SpectralCheckerTexture{}
	mi := &file_transport_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpectralCheckerTexture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpectralCheckerTexture) ProtoMessage() {}

func (x *SpectralCheckerTexture) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpectralCheckerTexture.ProtoReflect.Descriptor instead.
func (*SpectralCheckerTexture) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{13}
}

func (x *SpectralCheckerTexture) GetOdd() *SpectralConstantTexture {
	if x != nil {
		return x.Odd
	}
	return nil
}

func (x *SpectralCheckerTexture) GetEven() *SpectralConstantTexture {
	if x != nil {
		return x.Even
	}
	return nil
}

// Represents different types of materials.
type Material struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Material name, used as key in the scene's materials map
	Type  MaterialType           `protobuf:"varint,2,opt,name=type,proto3,enum=transport.MaterialType" json:"type,omitempty"`
	// Types that are valid to be assigned to MaterialProperties:
	//
	//	*Material_Dielectric
	//	*Material_Diffuselight
	//	*Material_Isotropic
	//	*Material_Lambert
	//	*Material_Metal
	//	*Material_Pbr
	MaterialProperties isMaterial_MaterialProperties `protobuf_oneof:"material_properties"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Material) Reset() {
	*x = Material{}
	mi := &file_transport_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Material) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Material) ProtoMessage() {}

func (x *Material) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Material.ProtoReflect.Descriptor instead.
func (*Material) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{14}
}

func (x *Material) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Material) GetType() MaterialType {
	if x != nil {
		return x.Type
	}
	return MaterialType_MATERIAL_TYPE_UNSPECIFIED
}

func (x *Material) GetMaterialProperties() isMaterial_MaterialProperties {
	if x != nil {
		return x.MaterialProperties
	}
	return nil
}

func (x *Material) GetDielectric() *DielectricMaterial {
	if x != nil {
		if x, ok := x.MaterialProperties.(*Material_Dielectric); ok {
			return x.Dielectric
		}
	}
	return nil
}

func (x *Material) GetDiffuselight() *DiffuseLightMaterial {
	if x != nil {
		if x, ok := x.MaterialProperties.(*Material_Diffuselight); ok {
			return x.Diffuselight
		}
	}
	return nil
}

func (x *Material) GetIsotropic() *IsotropicMaterial {
	if x != nil {
		if x, ok := x.MaterialProperties.(*Material_Isotropic); ok {
			return x.Isotropic
		}
	}
	return nil
}

func (x *Material) GetLambert() *LambertMaterial {
	if x != nil {
		if x, ok := x.MaterialProperties.(*Material_Lambert); ok {
			return x.Lambert
		}
	}
	return nil
}

func (x *Material) GetMetal() *MetalMaterial {
	if x != nil {
		if x, ok := x.MaterialProperties.(*Material_Metal); ok {
			return x.Metal
		}
	}
	return nil
}

func (x *Material) GetPbr() *PBRMaterial {
	if x != nil {
		if x, ok := x.MaterialProperties.(*Material_Pbr); ok {
			return x.Pbr
		}
	}
	return nil
}

type isMaterial_MaterialProperties interface {
	isMaterial_MaterialProperties()
}

type Material_Dielectric struct {
	Dielectric *DielectricMaterial `protobuf:"bytes,3,opt,name=dielectric,proto3,oneof"`
}

type Material_Diffuselight struct {
	Diffuselight *DiffuseLightMaterial `protobuf:"bytes,4,opt,name=diffuselight,proto3,oneof"`
}

type Material_Isotropic struct {
	Isotropic *IsotropicMaterial `protobuf:"bytes,5,opt,name=isotropic,proto3,oneof"`
}

type Material_Lambert struct {
	Lambert *LambertMaterial `protobuf:"bytes,6,opt,name=lambert,proto3,oneof"`
}

type Material_Metal struct {
	Metal *MetalMaterial `protobuf:"bytes,7,opt,name=metal,proto3,oneof"`
}

type Material_Pbr struct {
	Pbr *PBRMaterial `protobuf:"bytes,8,opt,name=pbr,proto3,oneof"`
}

func (*Material_Dielectric) isMaterial_MaterialProperties() {}

func (*Material_Diffuselight) isMaterial_MaterialProperties() {}

func (*Material_Isotropic) isMaterial_MaterialProperties() {}

func (*Material_Lambert) isMaterial_MaterialProperties() {}

func (*Material_Metal) isMaterial_MaterialProperties() {}

func (*Material_Pbr) isMaterial_MaterialProperties() {}

// Represents a Lambertian material.
type LambertMaterial struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to AlbedoProperties:
	//
	//	*LambertMaterial_Albedo
	//	*LambertMaterial_SpectralAlbedo
	AlbedoProperties isLambertMaterial_AlbedoProperties `protobuf_oneof:"albedo_properties"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LambertMaterial) Reset() {
	*x = LambertMaterial{}
	mi := &file_transport_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LambertMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LambertMaterial) ProtoMessage() {}

func (x *LambertMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LambertMaterial.ProtoReflect.Descriptor instead.
func (*LambertMaterial) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{15}
}

func (x *LambertMaterial) GetAlbedoProperties() isLambertMaterial_AlbedoProperties {
	if x != nil {
		return x.AlbedoProperties
	}
	return nil
}

func (x *LambertMaterial) GetAlbedo() *Texture {
	if x != nil {
		if x, ok := x.AlbedoProperties.(*LambertMaterial_Albedo); ok {
			return x.Albedo
		}
	}
	return nil
}

func (x *LambertMaterial) GetSpectralAlbedo() *SpectralConstantTexture {
	if x != nil {
		if x, ok := x.AlbedoProperties.(*LambertMaterial_SpectralAlbedo); ok {
			return x.SpectralAlbedo
		}
	}
	return nil
}

type isLambertMaterial_AlbedoProperties interface {
	isLambertMaterial_AlbedoProperties()
}

type LambertMaterial_Albedo struct {
	Albedo *Texture `protobuf:"bytes,1,opt,name=albedo,proto3,oneof"`
}

type LambertMaterial_SpectralAlbedo struct {
	SpectralAlbedo *SpectralConstantTexture `protobuf:"bytes,2,opt,name=spectral_albedo,json=spectralAlbedo,proto3,oneof"`
}

func (*LambertMaterial_Albedo) isLambertMaterial_AlbedoProperties() {}

func (*LambertMaterial_SpectralAlbedo) isLambertMaterial_AlbedoProperties() {}

// Represents a Dielectric material.
type DielectricMaterial struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to RefractiveIndexProperties:
	//
	//	*DielectricMaterial_Refidx
	//	*DielectricMaterial_SpectralRefidx
	RefractiveIndexProperties isDielectricMaterial_RefractiveIndexProperties `protobuf_oneof:"refractive_index_properties"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *DielectricMaterial) Reset() {
	*x = DielectricMaterial{}
	mi := &file_transport_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DielectricMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DielectricMaterial) ProtoMessage() {}

func (x *DielectricMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DielectricMaterial.ProtoReflect.Descriptor instead.
func (*DielectricMaterial) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{16}
}

func (x *DielectricMaterial) GetRefractiveIndexProperties() isDielectricMaterial_RefractiveIndexProperties {
	if x != nil {
		return x.RefractiveIndexProperties
	}
	return nil
}

func (x *DielectricMaterial) GetRefidx() float32 {
	if x != nil {
		if x, ok := x.RefractiveIndexProperties.(*DielectricMaterial_Refidx); ok {
			return x.Refidx
		}
	}
	return 0
}

func (x *DielectricMaterial) GetSpectralRefidx() *SpectralConstantTexture {
	if x != nil {
		if x, ok := x.RefractiveIndexProperties.(*DielectricMaterial_SpectralRefidx); ok {
			return x.SpectralRefidx
		}
	}
	return nil
}

type isDielectricMaterial_RefractiveIndexProperties interface {
	isDielectricMaterial_RefractiveIndexProperties()
}

type DielectricMaterial_Refidx struct {
	Refidx float32 `protobuf:"fixed32,1,opt,name=refidx,proto3,oneof"`
}

type DielectricMaterial_SpectralRefidx struct {
	SpectralRefidx *SpectralConstantTexture `protobuf:"bytes,2,opt,name=spectral_refidx,json=spectralRefidx,proto3,oneof"`
}

func (*DielectricMaterial_Refidx) isDielectricMaterial_RefractiveIndexProperties() {}

func (*DielectricMaterial_SpectralRefidx) isDielectricMaterial_RefractiveIndexProperties() {}

// Represents a Diffuse Light material.
type DiffuseLightMaterial struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to EmissionProperties:
	//
	//	*DiffuseLightMaterial_Emit
	//	*DiffuseLightMaterial_SpectralEmit
	EmissionProperties isDiffuseLightMaterial_EmissionProperties `protobuf_oneof:"emission_properties"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DiffuseLightMaterial) Reset() {
	*x = DiffuseLightMaterial{}
	mi := &file_transport_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiffuseLightMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffuseLightMaterial) ProtoMessage() {}

func (x *DiffuseLightMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffuseLightMaterial.ProtoReflect.Descriptor instead.
func (*DiffuseLightMaterial) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{17}
}

func (x *DiffuseLightMaterial) GetEmissionProperties() isDiffuseLightMaterial_EmissionProperties {
	if x != nil {
		return x.EmissionProperties
	}
	return nil
}

func (x *DiffuseLightMaterial) GetEmit() *Texture {
	if x != nil {
		if x, ok := x.EmissionProperties.(*DiffuseLightMaterial_Emit); ok {
			return x.Emit
		}
	}
	return nil
}

func (x *DiffuseLightMaterial) GetSpectralEmit() *SpectralConstantTexture {
	if x != nil {
		if x, ok := x.EmissionProperties.(*DiffuseLightMaterial_SpectralEmit); ok {
			return x.SpectralEmit
		}
	}
	return nil
}

type isDiffuseLightMaterial_EmissionProperties interface {
	isDiffuseLightMaterial_EmissionProperties()
}

type DiffuseLightMaterial_Emit struct {
	Emit *Texture `protobuf:"bytes,1,opt,name=emit,proto3,oneof"`
}

type DiffuseLightMaterial_SpectralEmit struct {
	SpectralEmit *SpectralConstantTexture `protobuf:"bytes,2,opt,name=spectral_emit,json=spectralEmit,proto3,oneof"`
}

func (*DiffuseLightMaterial_Emit) isDiffuseLightMaterial_EmissionProperties() {}

func (*DiffuseLightMaterial_SpectralEmit) isDiffuseLightMaterial_EmissionProperties() {}

// Represents an Isotropic material.
type IsotropicMaterial struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to AlbedoProperties:
	//
	//	*IsotropicMaterial_Albedo
	//	*IsotropicMaterial_SpectralAlbedo
	AlbedoProperties isIsotropicMaterial_AlbedoProperties `protobuf_oneof:"albedo_properties"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *IsotropicMaterial) Reset() {
	*x = IsotropicMaterial{}
	mi := &file_transport_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsotropicMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsotropicMaterial) ProtoMessage() {}

func (x *IsotropicMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsotropicMaterial.ProtoReflect.Descriptor instead.
func (*IsotropicMaterial) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{18}
}

func (x *IsotropicMaterial) GetAlbedoProperties() isIsotropicMaterial_AlbedoProperties {
	if x != nil {
		return x.AlbedoProperties
	}
	return nil
}

func (x *IsotropicMaterial) GetAlbedo() *Texture {
	if x != nil {
		if x, ok := x.AlbedoProperties.(*IsotropicMaterial_Albedo); ok {
			return x.Albedo
		}
	}
	return nil
}

func (x *IsotropicMaterial) GetSpectralAlbedo() *SpectralConstantTexture {
	if x != nil {
		if x, ok := x.AlbedoProperties.(*IsotropicMaterial_SpectralAlbedo); ok {
			return x.SpectralAlbedo
		}
	}
	return nil
}

type isIsotropicMaterial_AlbedoProperties interface {
	isIsotropicMaterial_AlbedoProperties()
}

type IsotropicMaterial_Albedo struct {
	Albedo *Texture `protobuf:"bytes,1,opt,name=albedo,proto3,oneof"`
}

type IsotropicMaterial_SpectralAlbedo struct {
	SpectralAlbedo *SpectralConstantTexture `protobuf:"bytes,2,opt,name=spectral_albedo,json=spectralAlbedo,proto3,oneof"`
}

func (*IsotropicMaterial_Albedo) isIsotropicMaterial_AlbedoProperties() {}

func (*IsotropicMaterial_SpectralAlbedo) isIsotropicMaterial_AlbedoProperties() {}

// Represents a Metal material.
type MetalMaterial struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Albedo        *Vec3                  `protobuf:"bytes,1,opt,name=albedo,proto3" json:"albedo,omitempty"` // Direct embedding of Texture
	Fuzz          float32                `protobuf:"fixed32,2,opt,name=fuzz,proto3" json:"fuzz,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetalMaterial) Reset() {
	*x = MetalMaterial{}
	mi := &file_transport_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetalMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetalMaterial) ProtoMessage() {}

func (x *MetalMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetalMaterial.ProtoReflect.Descriptor instead.
func (*MetalMaterial) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{19}
}

func (x *MetalMaterial) GetAlbedo() *Vec3 {
	if x != nil {
		return x.Albedo
	}
	return nil
}

func (x *MetalMaterial) GetFuzz() float32 {
	if x != nil {
		return x.Fuzz
	}
	return 0
}

// Represents a Physically Based Rendering (PBR) material.
type PBRMaterial struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Albedo        *Texture               `protobuf:"bytes,1,opt,name=albedo,proto3" json:"albedo,omitempty"`
	Roughness     *Texture               `protobuf:"bytes,2,opt,name=roughness,proto3" json:"roughness,omitempty"`
	Metalness     *Texture               `protobuf:"bytes,3,opt,name=metalness,proto3" json:"metalness,omitempty"`
	NormalMap     *Texture               `protobuf:"bytes,4,opt,name=normal_map,json=normalMap,proto3" json:"normal_map,omitempty"`
	Sss           *Texture               `protobuf:"bytes,5,opt,name=sss,proto3" json:"sss,omitempty"` // Subsurface Scattering
	SssRadius     float32                `protobuf:"fixed32,6,opt,name=sss_radius,json=sssRadius,proto3" json:"sss_radius,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PBRMaterial) Reset() {
	*x = PBRMaterial{}
	mi := &file_transport_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PBRMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBRMaterial) ProtoMessage() {}

func (x *PBRMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBRMaterial.ProtoReflect.Descriptor instead.
func (*PBRMaterial) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{20}
}

func (x *PBRMaterial) GetAlbedo() *Texture {
	if x != nil {
		return x.Albedo
	}
	return nil
}

func (x *PBRMaterial) GetRoughness() *Texture {
	if x != nil {
		return x.Roughness
	}
	return nil
}

func (x *PBRMaterial) GetMetalness() *Texture {
	if x != nil {
		return x.Metalness
	}
	return nil
}

func (x *PBRMaterial) GetNormalMap() *Texture {
	if x != nil {
		return x.NormalMap
	}
	return nil
}

func (x *PBRMaterial) GetSss() *Texture {
	if x != nil {
		return x.Sss
	}
	return nil
}

func (x *PBRMaterial) GetSssRadius() float32 {
	if x != nil {
		return x.SssRadius
	}
	return 0
}

// Represents a triangle object with per-vertex data.
type Triangle struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Vertex0 *Vec3                  `protobuf:"bytes,1,opt,name=vertex0,proto3" json:"vertex0,omitempty"`
	Vertex1 *Vec3                  `protobuf:"bytes,2,opt,name=vertex1,proto3" json:"vertex1,omitempty"`
	Vertex2 *Vec3                  `protobuf:"bytes,3,opt,name=vertex2,proto3" json:"vertex2,omitempty"`
	// UV coordinates for each vertex
	Uv0 *Vec2 `protobuf:"bytes,4,opt,name=uv0,proto3" json:"uv0,omitempty"`
	Uv1 *Vec2 `protobuf:"bytes,5,opt,name=uv1,proto3" json:"uv1,omitempty"`
	Uv2 *Vec2 `protobuf:"bytes,6,opt,name=uv2,proto3" json:"uv2,omitempty"`
	// Per-vertex normal vectors for smooth shading
	Normal0       *Vec3  `protobuf:"bytes,7,opt,name=normal0,proto3" json:"normal0,omitempty"`
	Normal1       *Vec3  `protobuf:"bytes,8,opt,name=normal1,proto3" json:"normal1,omitempty"`
	Normal2       *Vec3  `protobuf:"bytes,9,opt,name=normal2,proto3" json:"normal2,omitempty"`
	MaterialName  string `protobuf:"bytes,10,opt,name=material_name,json=materialName,proto3" json:"material_name,omitempty"` // Reference material by name
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Triangle) Reset() {
	*x = Triangle{}
	mi := &file_transport_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Triangle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Triangle) ProtoMessage() {}

func (x *Triangle) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Triangle.ProtoReflect.Descriptor instead.
func (*Triangle) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{21}
}

func (x *Triangle) GetVertex0() *Vec3 {
	if x != nil {
		return x.Vertex0
	}
	return nil
}

func (x *Triangle) GetVertex1() *Vec3 {
	if x != nil {
		return x.Vertex1
	}
	return nil
}

func (x *Triangle) GetVertex2() *Vec3 {
	if x != nil {
		return x.Vertex2
	}
	return nil
}

func (x *Triangle) GetUv0() *Vec2 {
	if x != nil {
		return x.Uv0
	}
	return nil
}

func (x *Triangle) GetUv1() *Vec2 {
	if x != nil {
		return x.Uv1
	}
	return nil
}

func (x *Triangle) GetUv2() *Vec2 {
	if x != nil {
		return x.Uv2
	}
	return nil
}

func (x *Triangle) GetNormal0() *Vec3 {
	if x != nil {
		return x.Normal0
	}
	return nil
}

func (x *Triangle) GetNormal1() *Vec3 {
	if x != nil {
		return x.Normal1
	}
	return nil
}

func (x *Triangle) GetNormal2() *Vec3 {
	if x != nil {
		return x.Normal2
	}
	return nil
}

func (x *Triangle) GetMaterialName() string {
	if x != nil {
		return x.MaterialName
	}
	return ""
}

// Represents a sphere object.
type Sphere struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Center        *Vec3                  `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`
	Radius        float32                `protobuf:"fixed32,2,opt,name=radius,proto3" json:"radius,omitempty"`
	MaterialName  string                 `protobuf:"bytes,3,opt,name=material_name,json=materialName,proto3" json:"material_name,omitempty"` // Reference material by name
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sphere) Reset() {
	*x = Sphere{}
	mi := &file_transport_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sphere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sphere) ProtoMessage() {}

func (x *Sphere) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sphere.ProtoReflect.Descriptor instead.
func (*Sphere) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{22}
}

func (x *Sphere) GetCenter() *Vec3 {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *Sphere) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *Sphere) GetMaterialName() string {
	if x != nil {
		return x.MaterialName
	}
	return ""
}

// Contains all the objects in the scene.
type SceneObjects struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Triangles     []*Triangle            `protobuf:"bytes,1,rep,name=triangles,proto3" json:"triangles,omitempty"`
	Spheres       []*Sphere              `protobuf:"bytes,2,rep,name=spheres,proto3" json:"spheres,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SceneObjects) Reset() {
	*x = SceneObjects{}
	mi := &file_transport_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SceneObjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneObjects) ProtoMessage() {}

func (x *SceneObjects) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneObjects.ProtoReflect.Descriptor instead.
func (*SceneObjects) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{23}
}

func (x *SceneObjects) GetTriangles() []*Triangle {
	if x != nil {
		return x.Triangles
	}
	return nil
}

func (x *SceneObjects) GetSpheres() []*Sphere {
	if x != nil {
		return x.Spheres
	}
	return nil
}

// The root message describing the entire scene.
type Scene struct {
	state                protoimpl.MessageState           `protogen:"open.v1"`
	Name                 string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string                           `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ColourRepresentation ColourRepresentation             `protobuf:"varint,3,opt,name=colour_representation,json=colourRepresentation,proto3,enum=transport.ColourRepresentation" json:"colour_representation,omitempty"`
	Camera               *Camera                          `protobuf:"bytes,4,opt,name=camera,proto3" json:"camera,omitempty"`
	Materials            map[string]*Material             `protobuf:"bytes,5,rep,name=materials,proto3" json:"materials,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ImageTextures        map[string]*ImageTextureMetadata `protobuf:"bytes,6,rep,name=image_textures,json=imageTextures,proto3" json:"image_textures,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Objects              *SceneObjects                    `protobuf:"bytes,7,opt,name=objects,proto3" json:"objects,omitempty"`
	StreamTriangles      bool                             `protobuf:"varint,8,opt,name=stream_triangles,json=streamTriangles,proto3" json:"stream_triangles,omitempty"`
	TotalTriangles       uint64                           `protobuf:"varint,9,opt,name=total_triangles,json=totalTriangles,proto3" json:"total_triangles,omitempty"`
	// Spectral background for spectral rendering
	SpectralBackground *TabulatedSpectralConstant `protobuf:"bytes,10,opt,name=spectral_background,json=spectralBackground,proto3" json:"spectral_background,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Scene) Reset() {
	*x = Scene{}
	mi := &file_transport_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scene) ProtoMessage() {}

func (x *Scene) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scene.ProtoReflect.Descriptor instead.
func (*Scene) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{24}
}

func (x *Scene) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scene) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Scene) GetColourRepresentation() ColourRepresentation {
	if x != nil {
		return x.ColourRepresentation
	}
	return ColourRepresentation_COLOUR_REPRESENTATION_UNSPECIFIED
}

func (x *Scene) GetCamera() *Camera {
	if x != nil {
		return x.Camera
	}
	return nil
}

func (x *Scene) GetMaterials() map[string]*Material {
	if x != nil {
		return x.Materials
	}
	return nil
}

func (x *Scene) GetImageTextures() map[string]*ImageTextureMetadata {
	if x != nil {
		return x.ImageTextures
	}
	return nil
}

func (x *Scene) GetObjects() *SceneObjects {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *Scene) GetStreamTriangles() bool {
	if x != nil {
		return x.StreamTriangles
	}
	return false
}

func (x *Scene) GetTotalTriangles() uint64 {
	if x != nil {
		return x.TotalTriangles
	}
	return 0
}

func (x *Scene) GetSpectralBackground() *TabulatedSpectralConstant {
	if x != nil {
		return x.SpectralBackground
	}
	return nil
}

// Request to retrieve a specific scene.
type GetSceneRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SceneName     string                 `protobuf:"bytes,1,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"` // Identifier for the scene to retrieve.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSceneRequest) Reset() {
	*x = GetSceneRequest{}
	mi := &file_transport_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSceneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSceneRequest) ProtoMessage() {}

func (x *GetSceneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSceneRequest.ProtoReflect.Descriptor instead.
func (*GetSceneRequest) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{25}
}

func (x *GetSceneRequest) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

// Request to stream the content of a texture file.
type StreamTextureFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                     // The path/name of the texture file to stream.
	Offset        uint64                 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`                        // The starting byte offset in the file to begin streaming from.
	ChunkSize     uint32                 `protobuf:"varint,3,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"` // The maximum size of each chunk to stream in bytes.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamTextureFileRequest) Reset() {
	*x = StreamTextureFileRequest{}
	mi := &file_transport_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTextureFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTextureFileRequest) ProtoMessage() {}

func (x *StreamTextureFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTextureFileRequest.ProtoReflect.Descriptor instead.
func (*StreamTextureFileRequest) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{26}
}

func (x *StreamTextureFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StreamTextureFileRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *StreamTextureFileRequest) GetChunkSize() uint32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

// A chunk of binary data for a streamed texture file.
type StreamTextureFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chunk         []byte                 `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"` // A segment of the texture file's binary data.
	Size          uint64                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`  // The size of the returned chunk.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamTextureFileResponse) Reset() {
	*x = StreamTextureFileResponse{}
	mi := &file_transport_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTextureFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTextureFileResponse) ProtoMessage() {}

func (x *StreamTextureFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTextureFileResponse.ProtoReflect.Descriptor instead.
func (*StreamTextureFileResponse) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{27}
}

func (x *StreamTextureFileResponse) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *StreamTextureFileResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Request to stream triangle data.
type StreamTrianglesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SceneName     string                 `protobuf:"bytes,1,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"`  // The name of the scene the triangles belong to.
	BatchSize     uint32                 `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"` // The number of triangles to return in each batch.
	Offset        uint64                 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                        // Renamed from offset_bytes. This is the starting triangle index.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamTrianglesRequest) Reset() {
	*x = StreamTrianglesRequest{}
	mi := &file_transport_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTrianglesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTrianglesRequest) ProtoMessage() {}

func (x *StreamTrianglesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTrianglesRequest.ProtoReflect.Descriptor instead.
func (*StreamTrianglesRequest) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{28}
}

func (x *StreamTrianglesRequest) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

func (x *StreamTrianglesRequest) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *StreamTrianglesRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Response containing a batch of triangles.
type StreamTrianglesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Triangles     []*Triangle            `protobuf:"bytes,1,rep,name=triangles,proto3" json:"triangles,omitempty"` // A batch of Triangle objects.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamTrianglesResponse) Reset() {
	*x = StreamTrianglesResponse{}
	mi := &file_transport_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTrianglesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTrianglesResponse) ProtoMessage() {}

func (x *StreamTrianglesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTrianglesResponse.ProtoReflect.Descriptor instead.
func (*StreamTrianglesResponse) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{29}
}

func (x *StreamTrianglesResponse) GetTriangles() []*Triangle {
	if x != nil {
		return x.Triangles
	}
	return nil
}

var File_transport_proto protoreflect.FileDescriptor

const file_transport_proto_rawDesc = "" +
	"\n" +
	"\x0ftransport.proto\x12\ttransport\"\xbe\x01\n" +
	"\x14ImageTextureMetadata\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x14\n" +
	"\x05width\x18\x02 \x01(\rR\x05width\x12\x16\n" +
	"\x06height\x18\x03 \x01(\rR\x06height\x12\x1a\n" +
	"\bchannels\x18\x04 \x01(\rR\bchannels\x12@\n" +
	"\fpixel_format\x18\x05 \x01(\x0e2\x1d.transport.TexturePixelFormatR\vpixelFormat\"0\n" +
	"\x04Vec3\x12\f\n" +
	"\x01x\x18\x01 \x01(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\x02R\x01y\x12\f\n" +
	"\x01z\x18\x03 \x01(\x02R\x01z\"\"\n" +
	"\x04Vec2\x12\f\n" +
	"\x01u\x18\x01 \x01(\x02R\x01u\x12\f\n" +
	"\x01v\x18\x02 \x01(\x02R\x01v\"\x93\x02\n" +
	"\x06Camera\x12+\n" +
	"\blookfrom\x18\x01 \x01(\v2\x0f.transport.Vec3R\blookfrom\x12'\n" +
	"\x06lookat\x18\x02 \x01(\v2\x0f.transport.Vec3R\x06lookat\x12!\n" +
	"\x03vup\x18\x03 \x01(\v2\x0f.transport.Vec3R\x03vup\x12\x12\n" +
	"\x04vfov\x18\x04 \x01(\x02R\x04vfov\x12\x16\n" +
	"\x06aspect\x18\x05 \x01(\x02R\x06aspect\x12\x1a\n" +
	"\baperture\x18\x06 \x01(\x02R\baperture\x12\x1c\n" +
	"\tfocusdist\x18\a \x01(\x02R\tfocusdist\x12\x14\n" +
	"\x05time0\x18\b \x01(\x02R\x05time0\x12\x14\n" +
	"\x05time1\x18\t \x01(\x02R\x05time1\"\xd5\x03\n" +
	"\aTexture\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12*\n" +
	"\x04type\x18\x02 \x01(\x0e2\x16.transport.TextureTypeR\x04type\x128\n" +
	"\bconstant\x18\x03 \x01(\v2\x1a.transport.ConstantTextureH\x00R\bconstant\x125\n" +
	"\achecker\x18\x04 \x01(\v2\x19.transport.CheckerTextureH\x00R\achecker\x12/\n" +
	"\x05image\x18\x05 \x01(\v2\x17.transport.ImageTextureH\x00R\x05image\x12/\n" +
	"\x05noise\x18\x06 \x01(\v2\x17.transport.NoiseTextureH\x00R\x05noise\x12Q\n" +
	"\x11spectral_constant\x18\a \x01(\v2\".transport.SpectralConstantTextureH\x00R\x10spectralConstant\x12N\n" +
	"\x10spectral_checker\x18\b \x01(\v2!.transport.SpectralCheckerTextureH\x00R\x0fspectralCheckerB\x14\n" +
	"\x12texture_properties\"8\n" +
	"\x0fConstantTexture\x12%\n" +
	"\x05value\x18\x01 \x01(\v2\x0f.transport.Vec3R\x05value\"^\n" +
	"\x0eCheckerTexture\x12$\n" +
	"\x03odd\x18\x01 \x01(\v2\x12.transport.TextureR\x03odd\x12&\n" +
	"\x04even\x18\x02 \x01(\v2\x12.transport.TextureR\x04even\"*\n" +
	"\fImageTexture\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\"$\n" +
	"\fNoiseTexture\x12\x14\n" +
	"\x05scale\x18\x01 \x01(\x02R\x05scale\"\xf9\x01\n" +
	"\x17SpectralConstantTexture\x12A\n" +
	"\bgaussian\x18\x01 \x01(\v2#.transport.GaussianSpectralConstantH\x00R\bgaussian\x12D\n" +
	"\ttabulated\x18\x02 \x01(\v2$.transport.TabulatedSpectralConstantH\x00R\ttabulated\x12>\n" +
	"\aneutral\x18\x03 \x01(\v2\".transport.NeutralSpectralConstantH\x00R\aneutralB\x15\n" +
	"\x13spectral_properties\"|\n" +
	"\x18GaussianSpectralConstant\x12\x1d\n" +
	"\n" +
	"peak_value\x18\x01 \x01(\x02R\tpeakValue\x12+\n" +
	"\x11center_wavelength\x18\x02 \x01(\x02R\x10centerWavelength\x12\x14\n" +
	"\x05width\x18\x03 \x01(\x02R\x05width\"U\n" +
	"\x19TabulatedSpectralConstant\x12 \n" +
	"\vwavelengths\x18\x01 \x03(\x02R\vwavelengths\x12\x16\n" +
	"\x06values\x18\x02 \x03(\x02R\x06values\";\n" +
	"\x17NeutralSpectralConstant\x12 \n" +
	"\vreflectance\x18\x01 \x01(\x02R\vreflectance\"\x86\x01\n" +
	"\x16SpectralCheckerTexture\x124\n" +
	"\x03odd\x18\x01 \x01(\v2\".transport.SpectralConstantTextureR\x03odd\x126\n" +
	"\x04even\x18\x02 \x01(\v2\".transport.SpectralConstantTextureR\x04even\"\xbe\x03\n" +
	"\bMaterial\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12+\n" +
	"\x04type\x18\x02 \x01(\x0e2\x17.transport.MaterialTypeR\x04type\x12?\n" +
	"\n" +
	"dielectric\x18\x03 \x01(\v2\x1d.transport.DielectricMaterialH\x00R\n" +
	"dielectric\x12E\n" +
	"\fdiffuselight\x18\x04 \x01(\v2\x1f.transport.DiffuseLightMaterialH\x00R\fdiffuselight\x12<\n" +
	"\tisotropic\x18\x05 \x01(\v2\x1c.transport.IsotropicMaterialH\x00R\tisotropic\x126\n" +
	"\alambert\x18\x06 \x01(\v2\x1a.transport.LambertMaterialH\x00R\alambert\x120\n" +
	"\x05metal\x18\a \x01(\v2\x18.transport.MetalMaterialH\x00R\x05metal\x12*\n" +
	"\x03pbr\x18\b \x01(\v2\x16.transport.PBRMaterialH\x00R\x03pbrB\x15\n" +
	"\x13material_properties\"\xa3\x01\n" +
	"\x0fLambertMaterial\x12,\n" +
	"\x06albedo\x18\x01 \x01(\v2\x12.transport.TextureH\x00R\x06albedo\x12M\n" +
	"\x0fspectral_albedo\x18\x02 \x01(\v2\".transport.SpectralConstantTextureH\x00R\x0espectralAlbedoB\x13\n" +
	"\x11albedo_properties\"\x9c\x01\n" +
	"\x12DielectricMaterial\x12\x18\n" +
	"\x06refidx\x18\x01 \x01(\x02H\x00R\x06refidx\x12M\n" +
	"\x0fspectral_refidx\x18\x02 \x01(\v2\".transport.SpectralConstantTextureH\x00R\x0espectralRefidxB\x1d\n" +
	"\x1brefractive_index_properties\"\xa2\x01\n" +
	"\x14DiffuseLightMaterial\x12(\n" +
	"\x04emit\x18\x01 \x01(\v2\x12.transport.TextureH\x00R\x04emit\x12I\n" +
	"\rspectral_emit\x18\x02 \x01(\v2\".transport.SpectralConstantTextureH\x00R\fspectralEmitB\x15\n" +
	"\x13emission_properties\"\xa5\x01\n" +
	"\x11IsotropicMaterial\x12,\n" +
	"\x06albedo\x18\x01 \x01(\v2\x12.transport.TextureH\x00R\x06albedo\x12M\n" +
	"\x0fspectral_albedo\x18\x02 \x01(\v2\".transport.SpectralConstantTextureH\x00R\x0espectralAlbedoB\x13\n" +
	"\x11albedo_properties\"L\n" +
	"\rMetalMaterial\x12'\n" +
	"\x06albedo\x18\x01 \x01(\v2\x0f.transport.Vec3R\x06albedo\x12\x12\n" +
	"\x04fuzz\x18\x02 \x01(\x02R\x04fuzz\"\x95\x02\n" +
	"\vPBRMaterial\x12*\n" +
	"\x06albedo\x18\x01 \x01(\v2\x12.transport.TextureR\x06albedo\x120\n" +
	"\troughness\x18\x02 \x01(\v2\x12.transport.TextureR\troughness\x120\n" +
	"\tmetalness\x18\x03 \x01(\v2\x12.transport.TextureR\tmetalness\x121\n" +
	"\n" +
	"normal_map\x18\x04 \x01(\v2\x12.transport.TextureR\tnormalMap\x12$\n" +
	"\x03sss\x18\x05 \x01(\v2\x12.transport.TextureR\x03sss\x12\x1d\n" +
	"\n" +
	"sss_radius\x18\x06 \x01(\x02R\tsssRadius\"\x9a\x03\n" +
	"\bTriangle\x12)\n" +
	"\avertex0\x18\x01 \x01(\v2\x0f.transport.Vec3R\avertex0\x12)\n" +
	"\avertex1\x18\x02 \x01(\v2\x0f.transport.Vec3R\avertex1\x12)\n" +
	"\avertex2\x18\x03 \x01(\v2\x0f.transport.Vec3R\avertex2\x12!\n" +
	"\x03uv0\x18\x04 \x01(\v2\x0f.transport.Vec2R\x03uv0\x12!\n" +
	"\x03uv1\x18\x05 \x01(\v2\x0f.transport.Vec2R\x03uv1\x12!\n" +
	"\x03uv2\x18\x06 \x01(\v2\x0f.transport.Vec2R\x03uv2\x12)\n" +
	"\anormal0\x18\a \x01(\v2\x0f.transport.Vec3R\anormal0\x12)\n" +
	"\anormal1\x18\b \x01(\v2\x0f.transport.Vec3R\anormal1\x12)\n" +
	"\anormal2\x18\t \x01(\v2\x0f.transport.Vec3R\anormal2\x12#\n" +
	"\rmaterial_name\x18\n" +
	" \x01(\tR\fmaterialName\"n\n" +
	"\x06Sphere\x12'\n" +
	"\x06center\x18\x01 \x01(\v2\x0f.transport.Vec3R\x06center\x12\x16\n" +
	"\x06radius\x18\x02 \x01(\x02R\x06radius\x12#\n" +
	"\rmaterial_name\x18\x03 \x01(\tR\fmaterialName\"n\n" +
	"\fSceneObjects\x121\n" +
	"\ttriangles\x18\x01 \x03(\v2\x13.transport.TriangleR\ttriangles\x12+\n" +
	"\aspheres\x18\x02 \x03(\v2\x11.transport.SphereR\aspheres\"\xd5\x05\n" +
	"\x05Scene\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12T\n" +
	"\x15colour_representation\x18\x03 \x01(\x0e2\x1f.transport.ColourRepresentationR\x14colourRepresentation\x12)\n" +
	"\x06camera\x18\x04 \x01(\v2\x11.transport.CameraR\x06camera\x12=\n" +
	"\tmaterials\x18\x05 \x03(\v2\x1f.transport.Scene.MaterialsEntryR\tmaterials\x12J\n" +
	"\x0eimage_textures\x18\x06 \x03(\v2#.transport.Scene.ImageTexturesEntryR\rimageTextures\x121\n" +
	"\aobjects\x18\a \x01(\v2\x17.transport.SceneObjectsR\aobjects\x12)\n" +
	"\x10stream_triangles\x18\b \x01(\bR\x0fstreamTriangles\x12'\n" +
	"\x0ftotal_triangles\x18\t \x01(\x04R\x0etotalTriangles\x12U\n" +
	"\x13spectral_background\x18\n" +
	" \x01(\v2$.transport.TabulatedSpectralConstantR\x12spectralBackground\x1aQ\n" +
	"\x0eMaterialsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.transport.MaterialR\x05value:\x028\x01\x1aa\n" +
	"\x12ImageTexturesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x125\n" +
	"\x05value\x18\x02 \x01(\v2\x1f.transport.ImageTextureMetadataR\x05value:\x028\x01\"0\n" +
	"\x0fGetSceneRequest\x12\x1d\n" +
	"\n" +
	"scene_name\x18\x01 \x01(\tR\tsceneName\"m\n" +
	"\x18StreamTextureFileRequest\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x04R\x06offset\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x03 \x01(\rR\tchunkSize\"E\n" +
	"\x19StreamTextureFileResponse\x12\x14\n" +
	"\x05chunk\x18\x01 \x01(\fR\x05chunk\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x04R\x04size\"n\n" +
	"\x16StreamTrianglesRequest\x12\x1d\n" +
	"\n" +
	"scene_name\x18\x01 \x01(\tR\tsceneName\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x02 \x01(\rR\tbatchSize\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x04R\x06offset\"L\n" +
	"\x17StreamTrianglesResponse\x121\n" +
	"\ttriangles\x18\x01 \x03(\v2\x13.transport.TriangleR\ttriangles*\x89\x01\n" +
	"\vTextureType\x12\x1c\n" +
	"\x18TEXTURE_TYPE_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bCONSTANT\x10\x01\x12\v\n" +
	"\aCHECKER\x10\x02\x12\t\n" +
	"\x05IMAGE\x10\x03\x12\t\n" +
	"\x05NOISE\x10\x04\x12\x15\n" +
	"\x11SPECTRAL_CONSTANT\x10\x05\x12\x14\n" +
	"\x10SPECTRAL_CHECKER\x10\x06*G\n" +
	"\x12TexturePixelFormat\x12$\n" +
	" TEXTURE_PIXEL_FORMAT_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aFLOAT64\x10\x01*\x80\x01\n" +
	"\fMaterialType\x12\x1d\n" +
	"\x19MATERIAL_TYPE_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"DIELECTRIC\x10\x01\x12\x11\n" +
	"\rDIFFUSE_LIGHT\x10\x02\x12\r\n" +
	"\tISOTROPIC\x10\x03\x12\v\n" +
	"\aLAMBERT\x10\x04\x12\t\n" +
	"\x05METAL\x10\x05\x12\a\n" +
	"\x03PBR\x10\x06*T\n" +
	"\x14ColourRepresentation\x12%\n" +
	"!COLOUR_REPRESENTATION_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03RGB\x10\x01\x12\f\n" +
	"\bSPECTRAL\x10\x022\x8f\x02\n" +
	"\x15SceneTransportService\x128\n" +
	"\bGetScene\x12\x1a.transport.GetSceneRequest\x1a\x10.transport.Scene\x12`\n" +
	"\x11StreamTextureFile\x12#.transport.StreamTextureFileRequest\x1a$.transport.StreamTextureFileResponse0\x01\x12Z\n" +
	"\x0fStreamTriangles\x12!.transport.StreamTrianglesRequest\x1a\".transport.StreamTrianglesResponse0\x01B>Z<github.com/flynn-nrg/izpi/internal/proto/transport;transportb\x06proto3"

var (
	file_transport_proto_rawDescOnce sync.Once
	file_transport_proto_rawDescData []byte
)

func file_transport_proto_rawDescGZIP() []byte {
	file_transport_proto_rawDescOnce.Do(func() {
		file_transport_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_transport_proto_rawDesc), len(file_transport_proto_rawDesc)))
	})
	return file_transport_proto_rawDescData
}

var file_transport_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_transport_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_transport_proto_goTypes = []any{
	(TextureType)(0),                  // 0: transport.TextureType
	(TexturePixelFormat)(0),           // 1: transport.TexturePixelFormat
	(MaterialType)(0),                 // 2: transport.MaterialType
	(ColourRepresentation)(0),         // 3: transport.ColourRepresentation
	(*ImageTextureMetadata)(nil),      // 4: transport.ImageTextureMetadata
	(*Vec3)(nil),                      // 5: transport.Vec3
	(*Vec2)(nil),                      // 6: transport.Vec2
	(*Camera)(nil),                    // 7: transport.Camera
	(*Texture)(nil),                   // 8: transport.Texture
	(*ConstantTexture)(nil),           // 9: transport.ConstantTexture
	(*CheckerTexture)(nil),            // 10: transport.CheckerTexture
	(*ImageTexture)(nil),              // 11: transport.ImageTexture
	(*NoiseTexture)(nil),              // 12: transport.NoiseTexture
	(*SpectralConstantTexture)(nil),   // 13: transport.SpectralConstantTexture
	(*GaussianSpectralConstant)(nil),  // 14: transport.GaussianSpectralConstant
	(*TabulatedSpectralConstant)(nil), // 15: transport.TabulatedSpectralConstant
	(*NeutralSpectralConstant)(nil),   // 16: transport.NeutralSpectralConstant
	(*SpectralCheckerTexture)(nil),    // 17: transport.SpectralCheckerTexture
	(*Material)(nil),                  // 18: transport.Material
	(*LambertMaterial)(nil),           // 19: transport.LambertMaterial
	(*DielectricMaterial)(nil),        // 20: transport.DielectricMaterial
	(*DiffuseLightMaterial)(nil),      // 21: transport.DiffuseLightMaterial
	(*IsotropicMaterial)(nil),         // 22: transport.IsotropicMaterial
	(*MetalMaterial)(nil),             // 23: transport.MetalMaterial
	(*PBRMaterial)(nil),               // 24: transport.PBRMaterial
	(*Triangle)(nil),                  // 25: transport.Triangle
	(*Sphere)(nil),                    // 26: transport.Sphere
	(*SceneObjects)(nil),              // 27: transport.SceneObjects
	(*Scene)(nil),                     // 28: transport.Scene
	(*GetSceneRequest)(nil),           // 29: transport.GetSceneRequest
	(*StreamTextureFileRequest)(nil),  // 30: transport.StreamTextureFileRequest
	(*StreamTextureFileResponse)(nil), // 31: transport.StreamTextureFileResponse
	(*StreamTrianglesRequest)(nil),    // 32: transport.StreamTrianglesRequest
	(*StreamTrianglesResponse)(nil),   // 33: transport.StreamTrianglesResponse
	nil,                               // 34: transport.Scene.MaterialsEntry
	nil,                               // 35: transport.Scene.ImageTexturesEntry
}
var file_transport_proto_depIdxs = []int32{
	1,  // 0: transport.ImageTextureMetadata.pixel_format:type_name -> transport.TexturePixelFormat
	5,  // 1: transport.Camera.lookfrom:type_name -> transport.Vec3
	5,  // 2: transport.Camera.lookat:type_name -> transport.Vec3
	5,  // 3: transport.Camera.vup:type_name -> transport.Vec3
	0,  // 4: transport.Texture.type:type_name -> transport.TextureType
	9,  // 5: transport.Texture.constant:type_name -> transport.ConstantTexture
	10, // 6: transport.Texture.checker:type_name -> transport.CheckerTexture
	11, // 7: transport.Texture.image:type_name -> transport.ImageTexture
	12, // 8: transport.Texture.noise:type_name -> transport.NoiseTexture
	13, // 9: transport.Texture.spectral_constant:type_name -> transport.SpectralConstantTexture
	17, // 10: transport.Texture.spectral_checker:type_name -> transport.SpectralCheckerTexture
	5,  // 11: transport.ConstantTexture.value:type_name -> transport.Vec3
	8,  // 12: transport.CheckerTexture.odd:type_name -> transport.Texture
	8,  // 13: transport.CheckerTexture.even:type_name -> transport.Texture
	14, // 14: transport.SpectralConstantTexture.gaussian:type_name -> transport.GaussianSpectralConstant
	15, // 15: transport.SpectralConstantTexture.tabulated:type_name -> transport.TabulatedSpectralConstant
	16, // 16: transport.SpectralConstantTexture.neutral:type_name -> transport.NeutralSpectralConstant
	13, // 17: transport.SpectralCheckerTexture.odd:type_name -> transport.SpectralConstantTexture
	13, // 18: transport.SpectralCheckerTexture.even:type_name -> transport.SpectralConstantTexture
	2,  // 19: transport.Material.type:type_name -> transport.MaterialType
	20, // 20: transport.Material.dielectric:type_name -> transport.DielectricMaterial
	21, // 21: transport.Material.diffuselight:type_name -> transport.DiffuseLightMaterial
	22, // 22: transport.Material.isotropic:type_name -> transport.IsotropicMaterial
	19, // 23: transport.Material.lambert:type_name -> transport.LambertMaterial
	23, // 24: transport.Material.metal:type_name -> transport.MetalMaterial
	24, // 25: transport.Material.pbr:type_name -> transport.PBRMaterial
	8,  // 26: transport.LambertMaterial.albedo:type_name -> transport.Texture
	13, // 27: transport.LambertMaterial.spectral_albedo:type_name -> transport.SpectralConstantTexture
	13, // 28: transport.DielectricMaterial.spectral_refidx:type_name -> transport.SpectralConstantTexture
	8,  // 29: transport.DiffuseLightMaterial.emit:type_name -> transport.Texture
	13, // 30: transport.DiffuseLightMaterial.spectral_emit:type_name -> transport.SpectralConstantTexture
	8,  // 31: transport.IsotropicMaterial.albedo:type_name -> transport.Texture
	13, // 32: transport.IsotropicMaterial.spectral_albedo:type_name -> transport.SpectralConstantTexture
	5,  // 33: transport.MetalMaterial.albedo:type_name -> transport.Vec3
	8,  // 34: transport.PBRMaterial.albedo:type_name -> transport.Texture
	8,  // 35: transport.PBRMaterial.roughness:type_name -> transport.Texture
	8,  // 36: transport.PBRMaterial.metalness:type_name -> transport.Texture
	8,  // 37: transport.PBRMaterial.normal_map:type_name -> transport.Texture
	8,  // 38: transport.PBRMaterial.sss:type_name -> transport.Texture
	5,  // 39: transport.Triangle.vertex0:type_name -> transport.Vec3
	5,  // 40: transport.Triangle.vertex1:type_name -> transport.Vec3
	5,  // 41: transport.Triangle.vertex2:type_name -> transport.Vec3
	6,  // 42: transport.Triangle.uv0:type_name -> transport.Vec2
	6,  // 43: transport.Triangle.uv1:type_name -> transport.Vec2
	6,  // 44: transport.Triangle.uv2:type_name -> transport.Vec2
	5,  // 45: transport.Triangle.normal0:type_name -> transport.Vec3
	5,  // 46: transport.Triangle.normal1:type_name -> transport.Vec3
	5,  // 47: transport.Triangle.normal2:type_name -> transport.Vec3
	5,  // 48: transport.Sphere.center:type_name -> transport.Vec3
	25, // 49: transport.SceneObjects.triangles:type_name -> transport.Triangle
	26, // 50: transport.SceneObjects.spheres:type_name -> transport.Sphere
	3,  // 51: transport.Scene.colour_representation:type_name -> transport.ColourRepresentation
	7,  // 52: transport.Scene.camera:type_name -> transport.Camera
	34, // 53: transport.Scene.materials:type_name -> transport.Scene.MaterialsEntry
	35, // 54: transport.Scene.image_textures:type_name -> transport.Scene.ImageTexturesEntry
	27, // 55: transport.Scene.objects:type_name -> transport.SceneObjects
	15, // 56: transport.Scene.spectral_background:type_name -> transport.TabulatedSpectralConstant
	25, // 57: transport.StreamTrianglesResponse.triangles:type_name -> transport.Triangle
	18, // 58: transport.Scene.MaterialsEntry.value:type_name -> transport.Material
	4,  // 59: transport.Scene.ImageTexturesEntry.value:type_name -> transport.ImageTextureMetadata
	29, // 60: transport.SceneTransportService.GetScene:input_type -> transport.GetSceneRequest
	30, // 61: transport.SceneTransportService.StreamTextureFile:input_type -> transport.StreamTextureFileRequest
	32, // 62: transport.SceneTransportService.StreamTriangles:input_type -> transport.StreamTrianglesRequest
	28, // 63: transport.SceneTransportService.GetScene:output_type -> transport.Scene
	31, // 64: transport.SceneTransportService.StreamTextureFile:output_type -> transport.StreamTextureFileResponse
	33, // 65: transport.SceneTransportService.StreamTriangles:output_type -> transport.StreamTrianglesResponse
	63, // [63:66] is the sub-list for method output_type
	60, // [60:63] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_transport_proto_init() }
func file_transport_proto_init() {
	if File_transport_proto != nil {
		return
	}
	file_transport_proto_msgTypes[4].OneofWrappers = []any{
		(*Texture_Constant)(nil),
		(*Texture_Checker)(nil),
		(*Texture_Image)(nil),
		(*Texture_Noise)(nil),
		(*Texture_SpectralConstant)(nil),
		(*Texture_SpectralChecker)(nil),
	}
	file_transport_proto_msgTypes[9].OneofWrappers = []any{
		(*SpectralConstantTexture_Gaussian)(nil),
		(*SpectralConstantTexture_Tabulated)(nil),
		(*SpectralConstantTexture_Neutral)(nil),
	}
	file_transport_proto_msgTypes[14].OneofWrappers = []any{
		(*Material_Dielectric)(nil),
		(*Material_Diffuselight)(nil),
		(*Material_Isotropic)(nil),
		(*Material_Lambert)(nil),
		(*Material_Metal)(nil),
		(*Material_Pbr)(nil),
	}
	file_transport_proto_msgTypes[15].OneofWrappers = []any{
		(*LambertMaterial_Albedo)(nil),
		(*LambertMaterial_SpectralAlbedo)(nil),
	}
	file_transport_proto_msgTypes[16].OneofWrappers = []any{
		(*DielectricMaterial_Refidx)(nil),
		(*DielectricMaterial_SpectralRefidx)(nil),
	}
	file_transport_proto_msgTypes[17].OneofWrappers = []any{
		(*DiffuseLightMaterial_Emit)(nil),
		(*DiffuseLightMaterial_SpectralEmit)(nil),
	}
	file_transport_proto_msgTypes[18].OneofWrappers = []any{
		(*IsotropicMaterial_Albedo)(nil),
		(*IsotropicMaterial_SpectralAlbedo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_transport_proto_rawDesc), len(file_transport_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transport_proto_goTypes,
		DependencyIndexes: file_transport_proto_depIdxs,
		EnumInfos:         file_transport_proto_enumTypes,
		MessageInfos:      file_transport_proto_msgTypes,
	}.Build()
	File_transport_proto = out.File
	file_transport_proto_goTypes = nil
	file_transport_proto_depIdxs = nil
}
