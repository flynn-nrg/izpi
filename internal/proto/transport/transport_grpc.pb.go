// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: transport.proto

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SceneTransportService_GetScene_FullMethodName          = "/transport.SceneTransportService/GetScene"
	SceneTransportService_StreamTextureFile_FullMethodName = "/transport.SceneTransportService/StreamTextureFile"
	SceneTransportService_StreamTriangles_FullMethodName   = "/transport.SceneTransportService/StreamTriangles"
)

// SceneTransportServiceClient is the client API for SceneTransportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SceneTransportServiceClient interface {
	GetScene(ctx context.Context, in *GetSceneRequest, opts ...grpc.CallOption) (*Scene, error)
	StreamTextureFile(ctx context.Context, in *StreamTextureFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTextureFileResponse], error)
	StreamTriangles(ctx context.Context, in *StreamTrianglesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTrianglesResponse], error)
}

type sceneTransportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSceneTransportServiceClient(cc grpc.ClientConnInterface) SceneTransportServiceClient {
	return &sceneTransportServiceClient{cc}
}

func (c *sceneTransportServiceClient) GetScene(ctx context.Context, in *GetSceneRequest, opts ...grpc.CallOption) (*Scene, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Scene)
	err := c.cc.Invoke(ctx, SceneTransportService_GetScene_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneTransportServiceClient) StreamTextureFile(ctx context.Context, in *StreamTextureFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTextureFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SceneTransportService_ServiceDesc.Streams[0], SceneTransportService_StreamTextureFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTextureFileRequest, StreamTextureFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SceneTransportService_StreamTextureFileClient = grpc.ServerStreamingClient[StreamTextureFileResponse]

func (c *sceneTransportServiceClient) StreamTriangles(ctx context.Context, in *StreamTrianglesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTrianglesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SceneTransportService_ServiceDesc.Streams[1], SceneTransportService_StreamTriangles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTrianglesRequest, StreamTrianglesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SceneTransportService_StreamTrianglesClient = grpc.ServerStreamingClient[StreamTrianglesResponse]

// SceneTransportServiceServer is the server API for SceneTransportService service.
// All implementations must embed UnimplementedSceneTransportServiceServer
// for forward compatibility.
type SceneTransportServiceServer interface {
	GetScene(context.Context, *GetSceneRequest) (*Scene, error)
	StreamTextureFile(*StreamTextureFileRequest, grpc.ServerStreamingServer[StreamTextureFileResponse]) error
	StreamTriangles(*StreamTrianglesRequest, grpc.ServerStreamingServer[StreamTrianglesResponse]) error
	mustEmbedUnimplementedSceneTransportServiceServer()
}

// UnimplementedSceneTransportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSceneTransportServiceServer struct{}

func (UnimplementedSceneTransportServiceServer) GetScene(context.Context, *GetSceneRequest) (*Scene, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScene not implemented")
}
func (UnimplementedSceneTransportServiceServer) StreamTextureFile(*StreamTextureFileRequest, grpc.ServerStreamingServer[StreamTextureFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTextureFile not implemented")
}
func (UnimplementedSceneTransportServiceServer) StreamTriangles(*StreamTrianglesRequest, grpc.ServerStreamingServer[StreamTrianglesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTriangles not implemented")
}
func (UnimplementedSceneTransportServiceServer) mustEmbedUnimplementedSceneTransportServiceServer() {}
func (UnimplementedSceneTransportServiceServer) testEmbeddedByValue()                               {}

// UnsafeSceneTransportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SceneTransportServiceServer will
// result in compilation errors.
type UnsafeSceneTransportServiceServer interface {
	mustEmbedUnimplementedSceneTransportServiceServer()
}

func RegisterSceneTransportServiceServer(s grpc.ServiceRegistrar, srv SceneTransportServiceServer) {
	// If the following call pancis, it indicates UnimplementedSceneTransportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SceneTransportService_ServiceDesc, srv)
}

func _SceneTransportService_GetScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneTransportServiceServer).GetScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneTransportService_GetScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneTransportServiceServer).GetScene(ctx, req.(*GetSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneTransportService_StreamTextureFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTextureFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SceneTransportServiceServer).StreamTextureFile(m, &grpc.GenericServerStream[StreamTextureFileRequest, StreamTextureFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SceneTransportService_StreamTextureFileServer = grpc.ServerStreamingServer[StreamTextureFileResponse]

func _SceneTransportService_StreamTriangles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTrianglesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SceneTransportServiceServer).StreamTriangles(m, &grpc.GenericServerStream[StreamTrianglesRequest, StreamTrianglesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SceneTransportService_StreamTrianglesServer = grpc.ServerStreamingServer[StreamTrianglesResponse]

// SceneTransportService_ServiceDesc is the grpc.ServiceDesc for SceneTransportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SceneTransportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transport.SceneTransportService",
	HandlerType: (*SceneTransportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScene",
			Handler:    _SceneTransportService_GetScene_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTextureFile",
			Handler:       _SceneTransportService_StreamTextureFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTriangles",
			Handler:       _SceneTransportService_StreamTriangles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transport.proto",
}
